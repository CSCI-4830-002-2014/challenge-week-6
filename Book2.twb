<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='mac' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0925.1717                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource inline='true' name='Sample - Superstore Sales Multi-language (Extract) Extract' version='8.3'>
      <connection class='dataengine' dbname='/Users/loganbates/Downloads/Sample - Superstore Sales Multi-language (Extract).tde' schema='Extract' tablename='Extract'>
        <relation name='Extract' table='[Extract].[Extract]' type='table' />
        <calculations>
          <calculation column='[2013 sales (copy)]' formula='if year([Order Date])=2012 then [Sales]&#13;&#10;else NULL end' />
          <calculation column='[Calculation_8821129170240873]' formula='if year([Order Date])=2013 then [Sales]&#13;&#10;else NULL end' />
          <calculation column='[Number of Records]' formula='1' />
          <calculation column='[Supplier]' formula='CASE [Product Name]&#10;  WHEN &quot;*Staples* Highlighting Markers&quot; THEN &quot;*Staples* Highlighting Markers&quot;&#10;  WHEN &quot;*Staples* Letter Opener&quot; THEN &quot;*Staples* Highlighting Markers&quot;&#10;  WHEN &quot;*Staples* Packaging Labels&quot; THEN &quot;*Staples* Highlighting Markers&quot;&#10;  WHEN &quot;*Staples* vLetter Openers, 2/Pack&quot; THEN &quot;*Staples* Highlighting Markers&quot;&#10;  WHEN &quot;3M Hangers With Command Adhesive&quot; THEN &quot;3M Hangers With Command Adhesive&quot;&#10;  WHEN &quot;3M Office Air Cleaner&quot; THEN &quot;3M Hangers With Command Adhesive&quot;&#10;  WHEN &quot;3M Organizer Strips&quot; THEN &quot;3M Hangers With Command Adhesive&quot;&#10;  WHEN &quot;3M Polarizing Light Filter Sleeves&quot; THEN &quot;3M Hangers With Command Adhesive&quot;&#10;  WHEN &quot;3M Polarizing Task Lamp with Clamp Arm, Light Gray&quot; THEN &quot;3M Hangers With Command Adhesive&quot;&#10;  WHEN &quot;Acco 3-Hole Punch&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco 6 Outlet Guardian Premium Surge Suppressor&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Clips to Go™ Binder Clips, 24 Clips in Two Sizes&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco D-Ring Binder w/DublLock®&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Four Pocket Poly Ring Binder with Label Holder, Smoke, 1&quot;&quot;&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Keyboard-In-A-Box®&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Perma® 2700 Stacking Storage Drawers&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Perma® 3000 Stacking Storage Drawers&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Pressboard Covers with Storage Hooks, 14 7/8&quot;&quot; x 11&quot;&quot;, Dark Blue&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Pressboard Covers with Storage Hooks, 14 7/8&quot;&quot; x 11&quot;&quot;, Executive Red&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Pressboard Covers with Storage Hooks, 14 7/8&quot;&quot; x 11&quot;&quot;, Light Blue&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco PRESSTEX® Data Binder with Storage Hooks, Dark Blue, 14 7/8&quot;&quot; X 11&quot;&quot;&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco PRESSTEX® Data Binder with Storage Hooks, Dark Blue, 9 1/2&quot;&quot; X 11&quot;&quot;&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Recycled 2&quot;&quot; Capacity Laser Printer Hanging Data Binders&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Six-Outlet Power Strip, 4&apos; Cord Length&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Smartsocket® Color-Coded Six-Outlet AC Adapter Model Surge Protectors&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Smartsocket™ Table Surge Protector, 6 Color-Coded Adapter Outlets&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco Suede Grain Vinyl Round Ring Binder&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acco® Hot Clips™ Clips to Go&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Accohide Poly Flexible Ring Binders&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;ACCOHIDE® 3-Ring Binder, Blue, 1&quot;&quot;&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;ACCOHIDE® Binder by Acco&quot; THEN &quot;Acco 3-Hole Punch&quot;&#10;  WHEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme Galleria® Hot Forged Steel Scissors with Colored Handles&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme Hot Forged Carbon Steel Scissors with Nickel-Plated Handles, 3 7/8&quot;&quot; Cut, 8&quot;&quot;L&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme Kleencut® Forged Steel Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® 8&quot;&quot; Straight Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Box Cutter Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Design Stainless Steel Bent Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Elite Stainless Steel Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Forged Steel Scissors with Black Enamel Handles&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Office Executive Series Stainless Steel Trimmers&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Acme® Preferred Stainless Steel Scissors&quot; THEN &quot;Acme Design Line 8&quot;&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8&quot;&quot; Cut&quot;&#10;  WHEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 4027 File Folder Labels for Dot Matrix Printers, 5000 Labels per Box, White&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 474&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 478&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 479&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 48&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 481&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 482&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 484&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 485&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 487&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 49&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 491&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 492&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 493&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 494&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 496&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 497&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 498&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 501&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 503&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 504&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 506&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 507&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 508&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 51&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 510&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 511&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 514&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 516&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 52&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery 520&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Arch Ring Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Binder Labels&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Binding System Hidden Tab™ Executive Style Index Sets&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Durable Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Durable Poly Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery File Folder Labels&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Flip-Chart Easel Binder, Black&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hanging File Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Heavy-Duty EZD ™ Binder With Locking Rings&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter Comfort Grip Fluorescent Highlighter, Yellow Ink&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter GlideStik Fluorescent Highlighter, Yellow Ink&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter Pen Style Six-Color Fluorescent Set&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter® EverBold™ Pen Style Fluorescent Highlighters, 4/Pack&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter® Fluorescent Desk Style Markers&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hi-Liter® Smear-Safe Highlighters&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Hole Reinforcements&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Legal 4-Ring Binder&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Non-Stick Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Poly Binder Pockets&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Premier Heavy-Duty Binder with Round Locking Rings&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Printable Repositionable Plastic Tabs&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Reinforcements for Hole-Punch Pages&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Round Ring Poly Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Self-Adhesive Photo Pockets for Polaroid Photos&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Trapezoid Extra Heavy Duty 4&quot;&quot; Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery Trapezoid Ring Binder, 3&quot;&quot; Capacity, Black, 1040 sheets&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery White Multi-Purpose Labels&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery® 3 1/2&quot;&quot; Diskette Storage Pages, 10/Pack&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery® Durable Plastic 1&quot;&quot; Binders&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Avery® Durable Slant Ring Binders With Label Holder&quot; THEN &quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;&#10;  WHEN &quot;Belkin 105-Key Black Keyboard&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 107-key enhanced keyboard, USB/PS/2 interface&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 325VA UPS Surge Protector, 6&apos;&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 5 Outlet SurgeMaster™ Power Centers&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 6 Outlet Metallic Surge Strip&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 7 Outlet SurgeMaster Surge Protector with Phone Protection&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 8 Outlet Surge Protector&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 8 Outlet SurgeMaster II Gold Surge Protector&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin 8 Outlet SurgeMaster II Gold Surge Protector with Phone Protection&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin ErgoBoard™ Keyboard&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin F5C206VTEL 6 Outlet Surge&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin F9M820V08 8 Outlet Surge&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin MediaBoard 104- Keyboard&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin OmniView SE Rackmount Kit&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Belkin Premiere Surge Master II 8-outlet surge protector&quot; THEN &quot;Belkin 105-Key Black Keyboard&quot;&#10;  WHEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 16701 Slimline Battery Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 16765 Mini Stand Up Battery Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 16801 Nautilus™ Battery Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 1730 StandUp Electric Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 1799 Powerhouse™ Electric Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston 19500 Mighty Mite Electric Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston Electric Pencil Sharpener, Model 1818, Charcoal Black&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston KS Multi-Size Manual Pencil Sharpener&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston Model 1800 Electric Pencil Sharpener, Gray&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Boston School Pro Electric Pencil Sharpener, 1670&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;BOSTON® Ranger® #55 Pencil Sharpener, Black&quot; THEN &quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;&#10;  WHEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon F603 Scientific Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon Image Class D660 Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon imageCLASS 2200 Advanced Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon Imageclass D680 Copier / Fax&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon MP100DHII Printing Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon MP25DIII Desktop Whisper-Quiet Printing Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon MP41DH Printing Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon P1-DHIII Palm Printing Calculator&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon PC-428 Personal Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon PC1060 Personal Laser Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon PC1080F Personal Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon PC940 Copier&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Canon S750 Color Inkjet Printer&quot; THEN &quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;&#10;  WHEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Advantage® Foldable Chair Mats for Low Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Antistatic Chair Mats for Low to Medium Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Base for stackable storage shelf, platinum&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Cleatmat Plus™ Chair Mats for High Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Cleatmat® Chair Mats for Medium Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon ClusterMat Chair Mat with Cordless Antistatic Protection&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Delta Triangular Chair Mat, 52&quot;&quot; x 58&quot;&quot;, Clear&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Econocleat® Chair Mats for Low Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Executive Woodline II Cherry Finish Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Expressions Mahogany Wood Desk Collection&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Expressions Punched Metal &amp; Wood Desk Accessories, Black &amp; Cherry&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Expressions Punched Metal &amp; Wood Desk Accessories, Pewter &amp; Cherry&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Expressions™ Desk Accessory, Wood Pencil Holder, Oak&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Expressions™ Desk Accessory, Wood Photo Frame, Mahogany&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Image Series Black Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Imàge® Series Desk Accessories, Clear&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Jumbo ProFile™ Portable File Boxes Graphite/Black&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Pizzaz™ Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Portable Mobile Manager&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Radial Chair Mat for Low to Medium Pile Carpets&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Regeneration Recycled Desk Accessories, Smoke&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Shelf Savers™ Cubes and Bins&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Simplefile® Box Office®&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Spacemaker® Box, Quick-Snap Lid, Clear&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon Wave Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® 200 Class™ Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® 200 Class™ Desk Accessories, Burgundy&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® 300 Class™ Desk Accessories, Black&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® 400 Class™ Desk Accessories, Black Carbon&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® 500 Class™ Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Executive Woodline II Desk Accessories, Mahogany&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Expressions™ Wood and Plastic Desk Accessories, Oak&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Expressions™ Wood Desk Accessories, Oak&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Gobal File Keepers&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Image Series Desk Accessories, Burgundy&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Eldon® Wave Desk Accessories&quot; THEN &quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;&#10;  WHEN &quot;Epson C62 Color Inkjet Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson C82 Color Inkjet Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson DFX-8500 Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson DFX5000+ Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson FX-2180 Wide Format Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson FX-980 Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson LQ-570e Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson LQ-870 Dot Matrix Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Epson Stylus 1520 Color Inkjet Printer&quot; THEN &quot;Epson C62 Color Inkjet Printer&quot;&#10;  WHEN &quot;Fellowes 17-key keypad for PS/2 interface&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes 8 Outlet Superior Workstation Surge Protector&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes 8 Outlet Superior Workstation Surge Protector w/o Phone/Fax/Modem Protection&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Bankers Box™ Staxonsteel® Drawer File/Stacking System&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Bankers Box™ Stor/Drawer® Steel Plus™&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Bases and Tops For Staxonsteel®/High-Stak® Systems&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Basic 104-Key Keyboard, Platinum&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Binding Cases&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Black Plastic Comb Bindings&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Command Center 5-outlet power strip&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes EZ Multi-Media Keyboard&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes High-Stak® Drawer Files&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Internet Keyboard, Platinum&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Mighty 8 Compact Surge Protector&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Mobile File Cart, Black&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Mobile Numeric Keypad, Graphite&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Neat Ideas® Storage Cubes&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Officeware™ Wire Shelving&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes PB300 Plastic Comb Binding Machine&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes PB500 Electric Punch Plastic Comb Binding Machine with Manual Bind&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Personal Hanging Folder Files, Navy&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Premier Superior Surge Suppressor, 10-Outlet, With Phone and Remote&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Recycled Storage Drawers&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Smart Design 104-Key Enhanced Keyboard, PS/2 Adapter, Platinum&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Smart Surge Ten-Outlet Protector, Platinum&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Staxonsteel® Drawer Files&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Stor/Drawer® Steel Plus™ Storage Drawers&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Strictly Business® Drawer File, Letter/Legal Size&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Super Stor/Drawer®&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Super Stor/Drawer® Files&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Superior 10 Outlet Split Surge Protector&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Fellowes Twister Kit, Gray/Clear, 3/pkg&quot; THEN &quot;Fellowes 17-key keypad for PS/2 interface&quot;&#10;  WHEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 2111 Invitation™ Series Corner Table&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 4-Shelf Metal Bookcases&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 4060 Series Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 4070 Series Pagoda™ Armless Upholstered Stacking Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 4070 Series Pagoda™ Round Back Stacking Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 4700 Series Mobuis™ Mid-Back Task Chairs with Adjustable Arms&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 5100 Series Wood Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 61000 Series Interactive Training Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon 94000 Series Round Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Comfortask® Task/Swivel Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Deluxe Fabric Upholstered Stacking Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Deluxe Fabric Upholstered Stacking Chairs, Rounded Back&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Every-Day® Chair Series Swivel Task Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon GuestStacker Chair&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon iLevel™ Computer Training Table&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Metal Bookcases, Black&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Metal Bookcases, Putty&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Multipurpose Stacking Arm Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Non-Folding Utility Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Olson Stacker Stools&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Pagoda™ Stacking Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Rectangular Conference Tables&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Hon Valutask™ Swivel Chairs&quot; THEN &quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;&#10;  WHEN &quot;Newell 307&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 308&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 309&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 31&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 310&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 312&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 314&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 315&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 318&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 320&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 321&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 323&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 325&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 326&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 327&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 329&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 332&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 333&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 335&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 336&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 337&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 338&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 339&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 340&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 342&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 343&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 346&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 35&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell 351&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Newell® 3-Hole Punched Plastic Slotted Magazine Holders for Binders&quot; THEN &quot;Newell 307&quot;&#10;  WHEN &quot;Sony IBM Color Diskettes, 25/Pack&quot; THEN &quot;Sony IBM Color Diskettes, 25/Pack&quot;&#10;  WHEN &quot;Sony MFD2HD Formatted Diskettes, 10/Pack&quot; THEN &quot;Sony IBM Color Diskettes, 25/Pack&quot;&#10;  WHEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones 1&quot;&quot; Hanging DublLock® Ring Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones 14 Line Acrylic Coated Pressboard Data Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Custom Binder Spines &amp; Labels&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones DublLock® D-Ring Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Easy Flow II™ Sheet Lifters&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Elliptical Ring 3 1/2&quot;&quot; Capacity Binders, 800 sheets&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Hanging View Binder, White, 1&quot;&quot;&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Impact Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Ledger-Size, Piano-Hinge Binder, 2&quot;&quot;, Blue&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Standard D-Ring Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Suede Grain Vinyl Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones Turn Tabs Binder Tool for Ring Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Wilson Jones® Four-Pocket Poly Binders&quot; THEN &quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;&#10;  WHEN &quot;Xerox 188&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1880&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1881&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1882&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1883&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1885&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1887&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1888&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1891&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1892&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1893&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1894&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1895&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1896&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1897&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1898&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1899&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 19&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 190&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1903&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1904&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1905&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1906&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1907&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1908&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 191&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1910&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1916&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1917&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1919&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1920&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1922&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1923&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1924&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1926&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1927&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1928&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1929&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 193&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1930&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1932&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1933&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1934&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1935&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1936&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1937&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1938&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1939&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 194&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1940&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1941&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1947&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1948&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1949&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 195&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1950&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1951&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1952&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1953&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1954&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1959&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 196&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1961&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1962&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1963&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1964&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1966&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1968&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 197&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1971&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1972&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1973&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1974&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1976&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1977&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1978&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1979&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 198&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1980&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1981&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1982&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1983&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1984&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1985&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1986&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1988&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1989&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 199&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1991&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1992&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1993&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1994&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1995&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1996&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1997&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 1998&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 2&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 20&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 200&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 204&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 207&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 209&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 21&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 210&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 212&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 213&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 214&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 215&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 216&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 217&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 220&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 221&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 223&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 224&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 226&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 227&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 229&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 23&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 231&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox 4200 Series MultiUse Premium Copy Paper (20Lb. and 84 Bright)&quot; THEN &quot;Xerox 188&quot;&#10;  WHEN &quot;Xerox Blank Computer Paper&quot; THEN &quot;Xerox 188&quot;&#10;  ELSE &quot;Zoom V.92 V.44 PCI Internal Controllerless FaxModem&quot;&#10;END' />
        </calculations>
        <refresh increment-key='' incremental-updates='false'>
          <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='16798' timestamp-start='2012-10-25 18:47:40.460' />
        </refresh>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Bestellpriorität</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Bestellpriorität]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Bestellpriorität</remote-alias>
            <ordinal>0</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Hoch&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Sehr hoch&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>26</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Categoria do produto</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Categoria do produto]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Categoria do produto</remote-alias>
            <ordinal>1</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Móveis&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tecnologia&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Categoría de producto</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Categoría de producto]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Categoría de producto</remote-alias>
            <ordinal>2</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Muebles&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tecnología&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Catégorie de produit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Catégorie de produit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Catégorie de produit</remote-alias>
            <ordinal>3</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Fournitures de bureau&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Technologie&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>129</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>4</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1523</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Aberdeen&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zibo&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>60</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Contenedor de productos</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Contenedor de productos]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Contenedor de productos</remote-alias>
            <ordinal>5</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Bolsa para envolver&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tambor jumbo&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>37</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Continent</remote-alias>
            <ordinal>6</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>6</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Africa&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;South America&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>35</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>7</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>50</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Algeria&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Viet Nam&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>53</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>4</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>8</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>3403</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>3403.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>62</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>9</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3403</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Aaron Davies Bruce&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zachary Yu&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>63</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer Segment]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer Segment</remote-alias>
            <ordinal>10</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Consumer&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Small Business&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>18</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>11</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>16</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>0.25</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>44</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Embalagem do produto</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Embalagem do produto]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Embalagem do produto</remote-alias>
            <ordinal>12</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Caixa grande&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tambor Jumbo&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>38</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Emballage du produit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Emballage du produit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Emballage du produit</remote-alias>
            <ordinal>13</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Bidon Jumbo&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Petite boîte&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>39</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Kundensegment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Kundensegment]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Kundensegment</remote-alias>
            <ordinal>14</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Home-Office&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Unternehmen&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>19</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mode d&apos;expédition</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Mode d&apos;expédition]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Mode d&apos;expédition</remote-alias>
            <ordinal>15</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Camion de livraison&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Fret aérien régulier&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Modo de envio</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Modo de envio]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Modo de envio</remote-alias>
            <ordinal>16</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Caminhão de entrega&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Transporte aéreo expresso&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Modo de envío</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Modo de envío]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Modo de envío</remote-alias>
            <ordinal>17</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Aéreo expreso&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Camión de transporte&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>16</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='integer'>1</statistic>
              <statistic aggregation='Max' datatype='integer'>1</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ordenar prioridad</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ordenar prioridad]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ordenar prioridad</remote-alias>
            <ordinal>19</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Alto&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;No especificado&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>27</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>20</ordinal>
            <family>Orders$</family>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1427</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='datetime'>#2010-01-01 00:00:00#</statistic>
              <statistic aggregation='Max' datatype='datetime'>#2013-12-31 00:00:00#</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>4</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>21</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>11270</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>3.0</statistic>
              <statistic aggregation='Max' datatype='real'>91591.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>65</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Priority</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Order Priority]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Priority</remote-alias>
            <ordinal>22</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Critical&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Not Specified&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>28</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>23</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1725</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;WC2A&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>61</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prioridade do pedido</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Prioridade do pedido]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Prioridade do pedido</remote-alias>
            <ordinal>24</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Alta&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Urgente&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>29</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Priorité de commande</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Priorité de commande]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Priorité de commande</remote-alias>
            <ordinal>25</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Cruciale&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Non indiquée&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>30</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Base Margin</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Product Base Margin]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Base Margin</remote-alias>
            <ordinal>26</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>52</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.34999999999999998</statistic>
              <statistic aggregation='Max' datatype='real'>0.84999999999999998</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>54</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Category</remote-alias>
            <ordinal>27</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Furniture&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Technology&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Container</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Container]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Container</remote-alias>
            <ordinal>28</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Jumbo Box&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Wrap Bag&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>40</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>29</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1263</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;\&quot;While you Were Out\&quot; Message Book, One Form per Page&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zoom V.92 V.44 PCI Internal Controllerless FaxModem&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>59</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Sub-Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Sub-Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Sub-Category</remote-alias>
            <ordinal>30</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Appliances&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Telephones and Communication&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>45</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Produkt-Subkategorie</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Produkt-Subkategorie]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Produkt-Subkategorie</remote-alias>
            <ordinal>31</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Binder und Binder-Zubehör&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Umschläge&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>46</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Produktkategorie</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Produktkategorie]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Produktkategorie</remote-alias>
            <ordinal>32</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Bürobedarf&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Technologie&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Produktverpackung</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Produktverpackung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Produktverpackung</remote-alias>
            <ordinal>33</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>6</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Großes Paket&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Wickelbeutel&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>36</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>34</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>14293</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>-17685.760000000002</statistic>
              <statistic aggregation='Max' datatype='real'>60844.298900000009</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>66</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity ordered new</remote-name>
            <remote-type>4</remote-type>
            <local-name>[Quantity ordered new]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Quantity ordered new</remote-alias>
            <ordinal>35</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>139</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>180.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>55</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>36</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Central&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;West&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>31</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>4</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>37</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>16798</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>26399.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>68</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>38</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>15416</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.3200000000000001</statistic>
              <statistic aggregation='Max' datatype='real'>100119.16</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>67</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment client</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segment client]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segment client</remote-alias>
            <ordinal>39</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Consommateur&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Petite entreprise&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>20</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segmento de cliente</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segmento de cliente]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segmento de cliente</remote-alias>
            <ordinal>40</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Consumidor&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Pequeña empresa&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>21</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segmento do cliente</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segmento do cliente]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segmento do cliente</remote-alias>
            <ordinal>41</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Consumidor&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Pequenas empresas&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>22</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>42</ordinal>
            <family>Orders$</family>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1459</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='datetime'>#2010-01-02 00:00:00#</statistic>
              <statistic aggregation='Max' datatype='datetime'>#2014-01-17 00:00:00#</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>43</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Delivery Truck&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Regular Air&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shipping Cost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shipping Cost]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Shipping Cost</remote-alias>
            <ordinal>44</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>652</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.48999999999999999</statistic>
              <statistic aggregation='Max' datatype='real'>164.72999999999999</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>57</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sous-catégorie de produit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sous-catégorie de produit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sous-catégorie de produit</remote-alias>
            <ordinal>45</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Appareils&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Téléphones et communication&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>47</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State or Province</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State or Province]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>State or Province</remote-alias>
            <ordinal>46</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>149</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Addis Ababa&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zhejiang Sheng&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>56</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subcategoria do produto</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subcategoria do produto]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Subcategoria do produto</remote-alias>
            <ordinal>47</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Aparelhos&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tesouras, réguas e estiletes&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>48</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subcategoría de producto</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subcategoría de producto]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Subcategoría de producto</remote-alias>
            <ordinal>48</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Almacenamiento y organización&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Tijeras, reglas y cortadoras&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>49</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unique cust loc</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Unique cust loc]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Unique cust loc</remote-alias>
            <ordinal>49</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3403</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Aaron BergmanAsiaPakistanSindhKarachi&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zuschuss DonatelliSouth AmericaBrazilMinas GeraisBelo Horizonte&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>64</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unit Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unit Price]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Unit Price</remote-alias>
            <ordinal>50</ordinal>
            <family>Orders$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>751</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.98999999999999999</statistic>
              <statistic aggregation='Max' datatype='real'>6783.0200000000004</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>58</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Versandart</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Versandart]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Versandart</remote-alias>
            <ordinal>51</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Express Air&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Regular Air&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>产品子类别</remote-name>
            <remote-type>129</remote-type>
            <local-name>[产品子类别]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>产品子类别</remote-alias>
            <ordinal>52</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;书夹和书夹附件&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;计算机外围设备&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>50</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>产品容器</remote-name>
            <remote-type>129</remote-type>
            <local-name>[产品容器]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>产品容器</remote-alias>
            <ordinal>53</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;中号箱子&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;超大鼓&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>41</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>产品类别</remote-name>
            <remote-type>129</remote-type>
            <local-name>[产品类别]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>产品类别</remote-alias>
            <ordinal>54</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;办公用品&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;技术&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>出荷モード</remote-name>
            <remote-type>129</remote-type>
            <local-name>[出荷モード]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>出荷モード</remote-alias>
            <ordinal>55</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;通常航空便&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;配送トラック&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>客户细分</remote-name>
            <remote-type>129</remote-type>
            <local-name>[客户细分]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>客户细分</remote-alias>
            <ordinal>56</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;公司&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;消费者&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>23</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>注文の優先度</remote-name>
            <remote-type>129</remote-type>
            <local-name>[注文の優先度]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>注文の優先度</remote-alias>
            <ordinal>57</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;中規模&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;高&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>32</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>装运模式</remote-name>
            <remote-type>129</remote-type>
            <local-name>[装运模式]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>装运模式</remote-alias>
            <ordinal>58</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;普通空运&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;货车&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>製品カテゴリー</remote-name>
            <remote-type>129</remote-type>
            <local-name>[製品カテゴリー]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>製品カテゴリー</remote-alias>
            <ordinal>59</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;テクノロジー&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;家具&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>製品コンテナー</remote-name>
            <remote-type>129</remote-type>
            <local-name>[製品コンテナー]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>製品コンテナー</remote-alias>
            <ordinal>60</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;ジャンボ ドラム&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;特大ボックス&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>42</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>製品サブカテゴリー</remote-name>
            <remote-type>129</remote-type>
            <local-name>[製品サブカテゴリー]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>製品サブカテゴリー</remote-alias>
            <ordinal>61</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;オフィス家具&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;電話と通信&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>51</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>订单优先级</remote-name>
            <remote-type>129</remote-type>
            <local-name>[订单优先级]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>订单优先级</remote-alias>
            <ordinal>62</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;严重&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;高&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>33</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>顧客区分</remote-name>
            <remote-type>129</remote-type>
            <local-name>[顧客区分]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>顧客区分</remote-alias>
            <ordinal>63</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;ホーム オフィス&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;消費者&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>24</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>고객 세그먼트</remote-name>
            <remote-type>129</remote-type>
            <local-name>[고객 세그먼트]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>고객 세그먼트</remote-alias>
            <ordinal>64</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;개인 사무실&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;중소 기업&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>25</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>선적 모드</remote-name>
            <remote-type>129</remote-type>
            <local-name>[선적 모드]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>선적 모드</remote-alias>
            <ordinal>65</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;배송 트럭&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;특급 항공&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>제품 범주</remote-name>
            <remote-type>129</remote-type>
            <local-name>[제품 범주]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>제품 범주</remote-alias>
            <ordinal>66</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;가구&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;사무용품&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>17</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>제품 컨테이너</remote-name>
            <remote-type>129</remote-type>
            <local-name>[제품 컨테이너]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>제품 컨테이너</remote-alias>
            <ordinal>67</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>7</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;작은 상자&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;포장 백&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>43</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>제품 하위 범주</remote-name>
            <remote-type>129</remote-type>
            <local-name>[제품 하위 범주]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>제품 하위 범주</remote-alias>
            <ordinal>68</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;가위, 자 및 트리머&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;펜 및 미술 용품&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>52</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>주문 우선 순위</remote-name>
            <remote-type>129</remote-type>
            <local-name>[주문 우선 순위]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>주문 우선 순위</remote-alias>
            <ordinal>69</ordinal>
            <family>Orders$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;낮음&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;지정되지 않음&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>34</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='2012 sales' datatype='real' name='[2013 sales (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if year([Order Date])=2012 then [Sales]&#13;&#10;else NULL end' />
      </column>
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Calculation_1641214165608856:qk]&quot;' value='Sales' />
          <alias key='&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales est (copy):qk]&quot;' value='Units' />
        </aliases>
      </column>
      <column datatype='string' hidden='true' name='[Bestellpriorität]' role='dimension' type='nominal'>
      </column>
      <column caption='Sales est' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Calculation_1641214165608856]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Sales]*(1-[Parameters].[Churn Rate])*(1+[Parameters].[Sales Growth])' />
      </column>
      <column caption='2013 sales' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Calculation_8821129170240873]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if year([Order Date])=2013 then [Sales]&#13;&#10;else NULL end' />
      </column>
      <column caption='Gross profit ratio' datatype='real' default-format='p0.0%' name='[Calculation_9100813121824802]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Profit])/SUM([Sales])' />
      </column>
      <column caption='Annual sales growth' datatype='real' default-format='p0%' name='[Calculation_9411129161810124]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Calculation_8821129170240873])&#13;&#10;/&#13;&#10;SUM([2013 sales (copy)])&#13;&#10;-&#13;&#10;1' />
      </column>
      <column datatype='string' hidden='true' name='[Categoria do produto]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Categoría de producto]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Catégorie de produit]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Contenedor de productos]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Continent]' role='dimension' type='nominal'>
      </column>
      <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column aggregation='Avg' caption='Rank customer' datatype='real' hidden='true' name='[Cust % rank]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='real' name='[Customer ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' hidden='true' name='[Customer LTV]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' hidden='true' name='[Days as customer]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' default-format='p0.0%' name='[Discount]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Embalagem do produto]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Emballage du produit]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[F34]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[F73]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Kundensegment]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Mode d&apos;expédition]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Modo de envio]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Modo de envío]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' hidden='true' name='[New Year]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' hidden='true' name='[Ordenar prioridad]' role='dimension' type='nominal'>
      </column>
      <column datatype='date' datatype-customized='true' name='[Order Date]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' datatype='real' name='[Order ID]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' hidden='true' name='[Order Quantity]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Order amount rank' datatype='real' default-format='p0%' hidden='true' name='[Order amount percentile]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' default-format='n#,##0;-#,##0' name='[Order number]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Per customer sequence of orders</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Prioridade do pedido]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Priorité de commande]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' default-format='p0.0%' name='[Product Base Margin]' role='measure' type='quantitative'>
      </column>
      <column caption='Department' datatype='string' name='[Product Category]' role='dimension' type='nominal'>
      </column>
      <column caption='Container' datatype='string' name='[Product Container]' role='dimension' type='nominal'>
      </column>
      <column caption='Item' datatype='string' name='[Product Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>We don&apos;t translate this field</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Category' datatype='string' name='[Product Sub-Category]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Produkt-Subkategorie]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Produktkategorie]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Produktverpackung]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' hidden='true' name='[Profit factor]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
      </column>
      <column caption='Order quantity' datatype='real' name='[Quantity ordered new]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' hidden='true' name='[RAND]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[Region]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='real' name='[Row ID]' role='dimension' type='ordinal'>
      </column>
      <column caption='Units est' datatype='real' default-format='n#,##0;-#,##0' name='[Sales est (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ROUND([Quantity ordered new]*(1-[Parameters].[Churn Rate])*(1+[Parameters].[Sales Growth]),0)' />
      </column>
      <column datatype='real' hidden='true' name='[Sales factor]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Segment client]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Segmento de cliente]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Segmento do cliente]' role='dimension' type='nominal'>
      </column>
      <column datatype='date' datatype-customized='true' name='[Ship Date]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Shipping Cost]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Sous-catégorie de produit]' role='dimension' type='nominal'>
      </column>
      <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <semantic-values semantic-role='[State].[Name]'>
          <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
        </semantic-values>
      </column>
      <column datatype='string' hidden='true' name='[Subcategoria do produto]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[Subcategoría de producto]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Supplier]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Product Name]' default='&quot;Zoom V.92 V.44 PCI Internal Controllerless FaxModem&quot;'>
          <bin value='&quot;*Staples* Highlighting Markers&quot;'>
            <value>&quot;*Staples* Highlighting Markers&quot;</value>
            <value>&quot;*Staples* Letter Opener&quot;</value>
            <value>&quot;*Staples* Packaging Labels&quot;</value>
            <value>&quot;*Staples* vLetter Openers, 2/Pack&quot;</value>
          </bin>
          <bin value='&quot;3M Hangers With Command Adhesive&quot;'>
            <value>&quot;3M Hangers With Command Adhesive&quot;</value>
            <value>&quot;3M Office Air Cleaner&quot;</value>
            <value>&quot;3M Organizer Strips&quot;</value>
            <value>&quot;3M Polarizing Light Filter Sleeves&quot;</value>
            <value>&quot;3M Polarizing Task Lamp with Clamp Arm, Light Gray&quot;</value>
          </bin>
          <bin value='&quot;Acco 3-Hole Punch&quot;'>
            <value>&quot;Acco 3-Hole Punch&quot;</value>
            <value>&quot;Acco 6 Outlet Guardian Premium Surge Suppressor&quot;</value>
            <value>&quot;Acco Clips to Go™ Binder Clips, 24 Clips in Two Sizes&quot;</value>
            <value>&quot;Acco D-Ring Binder w/DublLock®&quot;</value>
            <value>&quot;Acco Four Pocket Poly Ring Binder with Label Holder, Smoke, 1\&quot;&quot;</value>
            <value>&quot;Acco Keyboard-In-A-Box®&quot;</value>
            <value>&quot;Acco Perma® 2700 Stacking Storage Drawers&quot;</value>
            <value>&quot;Acco Perma® 3000 Stacking Storage Drawers&quot;</value>
            <value>&quot;Acco Pressboard Covers with Storage Hooks, 14 7/8\&quot; x 11\&quot;, Dark Blue&quot;</value>
            <value>&quot;Acco Pressboard Covers with Storage Hooks, 14 7/8\&quot; x 11\&quot;, Executive Red&quot;</value>
            <value>&quot;Acco Pressboard Covers with Storage Hooks, 14 7/8\&quot; x 11\&quot;, Light Blue&quot;</value>
            <value>&quot;Acco PRESSTEX® Data Binder with Storage Hooks, Dark Blue, 14 7/8\&quot; X 11\&quot;&quot;</value>
            <value>&quot;Acco PRESSTEX® Data Binder with Storage Hooks, Dark Blue, 9 1/2\&quot; X 11\&quot;&quot;</value>
            <value>&quot;Acco Recycled 2\&quot; Capacity Laser Printer Hanging Data Binders&quot;</value>
            <value>&quot;Acco Six-Outlet Power Strip, 4&apos; Cord Length&quot;</value>
            <value>&quot;Acco Smartsocket® Color-Coded Six-Outlet AC Adapter Model Surge Protectors&quot;</value>
            <value>&quot;Acco Smartsocket™ Table Surge Protector, 6 Color-Coded Adapter Outlets&quot;</value>
            <value>&quot;Acco Suede Grain Vinyl Round Ring Binder&quot;</value>
            <value>&quot;Acco® Hot Clips™ Clips to Go&quot;</value>
            <value>&quot;Accohide Poly Flexible Ring Binders&quot;</value>
            <value>&quot;ACCOHIDE® 3-Ring Binder, Blue, 1\&quot;&quot;</value>
            <value>&quot;ACCOHIDE® Binder by Acco&quot;</value>
          </bin>
          <bin value='&quot;Acme Design Line 8\&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8\&quot; Cut&quot;'>
            <value>&quot;Acme Design Line 8\&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8\&quot; Cut&quot;</value>
            <value>&quot;Acme Galleria® Hot Forged Steel Scissors with Colored Handles&quot;</value>
            <value>&quot;Acme Hot Forged Carbon Steel Scissors with Nickel-Plated Handles, 3 7/8\&quot; Cut, 8\&quot;L&quot;</value>
            <value>&quot;Acme Kleencut® Forged Steel Scissors&quot;</value>
            <value>&quot;Acme® 8\&quot; Straight Scissors&quot;</value>
            <value>&quot;Acme® Box Cutter Scissors&quot;</value>
            <value>&quot;Acme® Design Stainless Steel Bent Scissors&quot;</value>
            <value>&quot;Acme® Elite Stainless Steel Scissors&quot;</value>
            <value>&quot;Acme® Forged Steel Scissors with Black Enamel Handles&quot;</value>
            <value>&quot;Acme® Office Executive Series Stainless Steel Trimmers&quot;</value>
            <value>&quot;Acme® Preferred Stainless Steel Scissors&quot;</value>
          </bin>
          <bin value='&quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;'>
            <value>&quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;</value>
            <value>&quot;Avery 4027 File Folder Labels for Dot Matrix Printers, 5000 Labels per Box, White&quot;</value>
            <value>&quot;Avery 474&quot;</value>
            <value>&quot;Avery 478&quot;</value>
            <value>&quot;Avery 479&quot;</value>
            <value>&quot;Avery 48&quot;</value>
            <value>&quot;Avery 481&quot;</value>
            <value>&quot;Avery 482&quot;</value>
            <value>&quot;Avery 484&quot;</value>
            <value>&quot;Avery 485&quot;</value>
            <value>&quot;Avery 487&quot;</value>
            <value>&quot;Avery 49&quot;</value>
            <value>&quot;Avery 491&quot;</value>
            <value>&quot;Avery 492&quot;</value>
            <value>&quot;Avery 493&quot;</value>
            <value>&quot;Avery 494&quot;</value>
            <value>&quot;Avery 496&quot;</value>
            <value>&quot;Avery 497&quot;</value>
            <value>&quot;Avery 498&quot;</value>
            <value>&quot;Avery 501&quot;</value>
            <value>&quot;Avery 503&quot;</value>
            <value>&quot;Avery 504&quot;</value>
            <value>&quot;Avery 506&quot;</value>
            <value>&quot;Avery 507&quot;</value>
            <value>&quot;Avery 508&quot;</value>
            <value>&quot;Avery 51&quot;</value>
            <value>&quot;Avery 510&quot;</value>
            <value>&quot;Avery 511&quot;</value>
            <value>&quot;Avery 514&quot;</value>
            <value>&quot;Avery 516&quot;</value>
            <value>&quot;Avery 52&quot;</value>
            <value>&quot;Avery 520&quot;</value>
            <value>&quot;Avery Arch Ring Binders&quot;</value>
            <value>&quot;Avery Binder Labels&quot;</value>
            <value>&quot;Avery Binding System Hidden Tab™ Executive Style Index Sets&quot;</value>
            <value>&quot;Avery Durable Binders&quot;</value>
            <value>&quot;Avery Durable Poly Binders&quot;</value>
            <value>&quot;Avery File Folder Labels&quot;</value>
            <value>&quot;Avery Flip-Chart Easel Binder, Black&quot;</value>
            <value>&quot;Avery Hanging File Binders&quot;</value>
            <value>&quot;Avery Heavy-Duty EZD ™ Binder With Locking Rings&quot;</value>
            <value>&quot;Avery Hi-Liter Comfort Grip Fluorescent Highlighter, Yellow Ink&quot;</value>
            <value>&quot;Avery Hi-Liter GlideStik Fluorescent Highlighter, Yellow Ink&quot;</value>
            <value>&quot;Avery Hi-Liter Pen Style Six-Color Fluorescent Set&quot;</value>
            <value>&quot;Avery Hi-Liter® EverBold™ Pen Style Fluorescent Highlighters, 4/Pack&quot;</value>
            <value>&quot;Avery Hi-Liter® Fluorescent Desk Style Markers&quot;</value>
            <value>&quot;Avery Hi-Liter® Smear-Safe Highlighters&quot;</value>
            <value>&quot;Avery Hole Reinforcements&quot;</value>
            <value>&quot;Avery Legal 4-Ring Binder&quot;</value>
            <value>&quot;Avery Non-Stick Binders&quot;</value>
            <value>&quot;Avery Poly Binder Pockets&quot;</value>
            <value>&quot;Avery Premier Heavy-Duty Binder with Round Locking Rings&quot;</value>
            <value>&quot;Avery Printable Repositionable Plastic Tabs&quot;</value>
            <value>&quot;Avery Reinforcements for Hole-Punch Pages&quot;</value>
            <value>&quot;Avery Round Ring Poly Binders&quot;</value>
            <value>&quot;Avery Self-Adhesive Photo Pockets for Polaroid Photos&quot;</value>
            <value>&quot;Avery Trapezoid Extra Heavy Duty 4\&quot; Binders&quot;</value>
            <value>&quot;Avery Trapezoid Ring Binder, 3\&quot; Capacity, Black, 1040 sheets&quot;</value>
            <value>&quot;Avery White Multi-Purpose Labels&quot;</value>
            <value>&quot;Avery® 3 1/2\&quot; Diskette Storage Pages, 10/Pack&quot;</value>
            <value>&quot;Avery® Durable Plastic 1\&quot; Binders&quot;</value>
            <value>&quot;Avery® Durable Slant Ring Binders With Label Holder&quot;</value>
          </bin>
          <bin value='&quot;Belkin 105-Key Black Keyboard&quot;'>
            <value>&quot;Belkin 105-Key Black Keyboard&quot;</value>
            <value>&quot;Belkin 107-key enhanced keyboard, USB/PS/2 interface&quot;</value>
            <value>&quot;Belkin 325VA UPS Surge Protector, 6&apos;&quot;</value>
            <value>&quot;Belkin 5 Outlet SurgeMaster™ Power Centers&quot;</value>
            <value>&quot;Belkin 6 Outlet Metallic Surge Strip&quot;</value>
            <value>&quot;Belkin 7 Outlet SurgeMaster Surge Protector with Phone Protection&quot;</value>
            <value>&quot;Belkin 8 Outlet Surge Protector&quot;</value>
            <value>&quot;Belkin 8 Outlet SurgeMaster II Gold Surge Protector&quot;</value>
            <value>&quot;Belkin 8 Outlet SurgeMaster II Gold Surge Protector with Phone Protection&quot;</value>
            <value>&quot;Belkin ErgoBoard™ Keyboard&quot;</value>
            <value>&quot;Belkin F5C206VTEL 6 Outlet Surge&quot;</value>
            <value>&quot;Belkin F9M820V08 8 Outlet Surge&quot;</value>
            <value>&quot;Belkin MediaBoard 104- Keyboard&quot;</value>
            <value>&quot;Belkin OmniView SE Rackmount Kit&quot;</value>
            <value>&quot;Belkin Premiere Surge Master II 8-outlet surge protector&quot;</value>
          </bin>
          <bin value='&quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;'>
            <value>&quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;</value>
            <value>&quot;Boston 16701 Slimline Battery Pencil Sharpener&quot;</value>
            <value>&quot;Boston 16765 Mini Stand Up Battery Pencil Sharpener&quot;</value>
            <value>&quot;Boston 16801 Nautilus™ Battery Pencil Sharpener&quot;</value>
            <value>&quot;Boston 1730 StandUp Electric Pencil Sharpener&quot;</value>
            <value>&quot;Boston 1799 Powerhouse™ Electric Pencil Sharpener&quot;</value>
            <value>&quot;Boston 19500 Mighty Mite Electric Pencil Sharpener&quot;</value>
            <value>&quot;Boston Electric Pencil Sharpener, Model 1818, Charcoal Black&quot;</value>
            <value>&quot;Boston KS Multi-Size Manual Pencil Sharpener&quot;</value>
            <value>&quot;Boston Model 1800 Electric Pencil Sharpener, Gray&quot;</value>
            <value>&quot;Boston School Pro Electric Pencil Sharpener, 1670&quot;</value>
            <value>&quot;BOSTON® Ranger® \#55 Pencil Sharpener, Black&quot;</value>
          </bin>
          <bin value='&quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;'>
            <value>&quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;</value>
            <value>&quot;Canon F603 Scientific Calculator&quot;</value>
            <value>&quot;Canon Image Class D660 Copier&quot;</value>
            <value>&quot;Canon imageCLASS 2200 Advanced Copier&quot;</value>
            <value>&quot;Canon Imageclass D680 Copier / Fax&quot;</value>
            <value>&quot;Canon MP100DHII Printing Calculator&quot;</value>
            <value>&quot;Canon MP25DIII Desktop Whisper-Quiet Printing Calculator&quot;</value>
            <value>&quot;Canon MP41DH Printing Calculator&quot;</value>
            <value>&quot;Canon P1-DHIII Palm Printing Calculator&quot;</value>
            <value>&quot;Canon PC-428 Personal Copier&quot;</value>
            <value>&quot;Canon PC1060 Personal Laser Copier&quot;</value>
            <value>&quot;Canon PC1080F Personal Copier&quot;</value>
            <value>&quot;Canon PC940 Copier&quot;</value>
            <value>&quot;Canon S750 Color Inkjet Printer&quot;</value>
          </bin>
          <bin value='&quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;'>
            <value>&quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;</value>
            <value>&quot;Eldon Advantage® Foldable Chair Mats for Low Pile Carpets&quot;</value>
            <value>&quot;Eldon Antistatic Chair Mats for Low to Medium Pile Carpets&quot;</value>
            <value>&quot;Eldon Base for stackable storage shelf, platinum&quot;</value>
            <value>&quot;Eldon Cleatmat Plus™ Chair Mats for High Pile Carpets&quot;</value>
            <value>&quot;Eldon Cleatmat® Chair Mats for Medium Pile Carpets&quot;</value>
            <value>&quot;Eldon ClusterMat Chair Mat with Cordless Antistatic Protection&quot;</value>
            <value>&quot;Eldon Delta Triangular Chair Mat, 52\&quot; x 58\&quot;, Clear&quot;</value>
            <value>&quot;Eldon Econocleat® Chair Mats for Low Pile Carpets&quot;</value>
            <value>&quot;Eldon Executive Woodline II Cherry Finish Desk Accessories&quot;</value>
            <value>&quot;Eldon Expressions Mahogany Wood Desk Collection&quot;</value>
            <value>&quot;Eldon Expressions Punched Metal &amp; Wood Desk Accessories, Black &amp; Cherry&quot;</value>
            <value>&quot;Eldon Expressions Punched Metal &amp; Wood Desk Accessories, Pewter &amp; Cherry&quot;</value>
            <value>&quot;Eldon Expressions™ Desk Accessory, Wood Pencil Holder, Oak&quot;</value>
            <value>&quot;Eldon Expressions™ Desk Accessory, Wood Photo Frame, Mahogany&quot;</value>
            <value>&quot;Eldon Image Series Black Desk Accessories&quot;</value>
            <value>&quot;Eldon Imàge® Series Desk Accessories, Clear&quot;</value>
            <value>&quot;Eldon Jumbo ProFile™ Portable File Boxes Graphite/Black&quot;</value>
            <value>&quot;Eldon Pizzaz™ Desk Accessories&quot;</value>
            <value>&quot;Eldon Portable Mobile Manager&quot;</value>
            <value>&quot;Eldon Radial Chair Mat for Low to Medium Pile Carpets&quot;</value>
            <value>&quot;Eldon Regeneration Recycled Desk Accessories, Smoke&quot;</value>
            <value>&quot;Eldon Shelf Savers™ Cubes and Bins&quot;</value>
            <value>&quot;Eldon Simplefile® Box Office®&quot;</value>
            <value>&quot;Eldon Spacemaker® Box, Quick-Snap Lid, Clear&quot;</value>
            <value>&quot;Eldon Wave Desk Accessories&quot;</value>
            <value>&quot;Eldon® 200 Class™ Desk Accessories&quot;</value>
            <value>&quot;Eldon® 200 Class™ Desk Accessories, Burgundy&quot;</value>
            <value>&quot;Eldon® 300 Class™ Desk Accessories, Black&quot;</value>
            <value>&quot;Eldon® 400 Class™ Desk Accessories, Black Carbon&quot;</value>
            <value>&quot;Eldon® 500 Class™ Desk Accessories&quot;</value>
            <value>&quot;Eldon® Executive Woodline II Desk Accessories, Mahogany&quot;</value>
            <value>&quot;Eldon® Expressions™ Wood and Plastic Desk Accessories, Oak&quot;</value>
            <value>&quot;Eldon® Expressions™ Wood Desk Accessories, Oak&quot;</value>
            <value>&quot;Eldon® Gobal File Keepers&quot;</value>
            <value>&quot;Eldon® Image Series Desk Accessories, Burgundy&quot;</value>
            <value>&quot;Eldon® Wave Desk Accessories&quot;</value>
          </bin>
          <bin value='&quot;Epson C62 Color Inkjet Printer&quot;'>
            <value>&quot;Epson C62 Color Inkjet Printer&quot;</value>
            <value>&quot;Epson C82 Color Inkjet Printer&quot;</value>
            <value>&quot;Epson DFX-8500 Dot Matrix Printer&quot;</value>
            <value>&quot;Epson DFX5000+ Dot Matrix Printer&quot;</value>
            <value>&quot;Epson FX-2180 Wide Format Dot Matrix Printer&quot;</value>
            <value>&quot;Epson FX-980 Dot Matrix Printer&quot;</value>
            <value>&quot;Epson LQ-570e Dot Matrix Printer&quot;</value>
            <value>&quot;Epson LQ-870 Dot Matrix Printer&quot;</value>
            <value>&quot;Epson Stylus 1520 Color Inkjet Printer&quot;</value>
          </bin>
          <bin value='&quot;Fellowes 17-key keypad for PS/2 interface&quot;'>
            <value>&quot;Fellowes 17-key keypad for PS/2 interface&quot;</value>
            <value>&quot;Fellowes 8 Outlet Superior Workstation Surge Protector&quot;</value>
            <value>&quot;Fellowes 8 Outlet Superior Workstation Surge Protector w/o Phone/Fax/Modem Protection&quot;</value>
            <value>&quot;Fellowes Bankers Box™ Staxonsteel® Drawer File/Stacking System&quot;</value>
            <value>&quot;Fellowes Bankers Box™ Stor/Drawer® Steel Plus™&quot;</value>
            <value>&quot;Fellowes Bases and Tops For Staxonsteel®/High-Stak® Systems&quot;</value>
            <value>&quot;Fellowes Basic 104-Key Keyboard, Platinum&quot;</value>
            <value>&quot;Fellowes Binding Cases&quot;</value>
            <value>&quot;Fellowes Black Plastic Comb Bindings&quot;</value>
            <value>&quot;Fellowes Command Center 5-outlet power strip&quot;</value>
            <value>&quot;Fellowes EZ Multi-Media Keyboard&quot;</value>
            <value>&quot;Fellowes High-Stak® Drawer Files&quot;</value>
            <value>&quot;Fellowes Internet Keyboard, Platinum&quot;</value>
            <value>&quot;Fellowes Mighty 8 Compact Surge Protector&quot;</value>
            <value>&quot;Fellowes Mobile File Cart, Black&quot;</value>
            <value>&quot;Fellowes Mobile Numeric Keypad, Graphite&quot;</value>
            <value>&quot;Fellowes Neat Ideas® Storage Cubes&quot;</value>
            <value>&quot;Fellowes Officeware™ Wire Shelving&quot;</value>
            <value>&quot;Fellowes PB300 Plastic Comb Binding Machine&quot;</value>
            <value>&quot;Fellowes PB500 Electric Punch Plastic Comb Binding Machine with Manual Bind&quot;</value>
            <value>&quot;Fellowes Personal Hanging Folder Files, Navy&quot;</value>
            <value>&quot;Fellowes Premier Superior Surge Suppressor, 10-Outlet, With Phone and Remote&quot;</value>
            <value>&quot;Fellowes Recycled Storage Drawers&quot;</value>
            <value>&quot;Fellowes Smart Design 104-Key Enhanced Keyboard, PS/2 Adapter, Platinum&quot;</value>
            <value>&quot;Fellowes Smart Surge Ten-Outlet Protector, Platinum&quot;</value>
            <value>&quot;Fellowes Staxonsteel® Drawer Files&quot;</value>
            <value>&quot;Fellowes Stor/Drawer® Steel Plus™ Storage Drawers&quot;</value>
            <value>&quot;Fellowes Strictly Business® Drawer File, Letter/Legal Size&quot;</value>
            <value>&quot;Fellowes Super Stor/Drawer®&quot;</value>
            <value>&quot;Fellowes Super Stor/Drawer® Files&quot;</value>
            <value>&quot;Fellowes Superior 10 Outlet Split Surge Protector&quot;</value>
            <value>&quot;Fellowes Twister Kit, Gray/Clear, 3/pkg&quot;</value>
          </bin>
          <bin value='&quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;'>
            <value>&quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;</value>
            <value>&quot;Hon 2111 Invitation™ Series Corner Table&quot;</value>
            <value>&quot;Hon 4-Shelf Metal Bookcases&quot;</value>
            <value>&quot;Hon 4060 Series Tables&quot;</value>
            <value>&quot;Hon 4070 Series Pagoda™ Armless Upholstered Stacking Chairs&quot;</value>
            <value>&quot;Hon 4070 Series Pagoda™ Round Back Stacking Chairs&quot;</value>
            <value>&quot;Hon 4700 Series Mobuis™ Mid-Back Task Chairs with Adjustable Arms&quot;</value>
            <value>&quot;Hon 5100 Series Wood Tables&quot;</value>
            <value>&quot;Hon 61000 Series Interactive Training Tables&quot;</value>
            <value>&quot;Hon 94000 Series Round Tables&quot;</value>
            <value>&quot;Hon Comfortask® Task/Swivel Chairs&quot;</value>
            <value>&quot;Hon Deluxe Fabric Upholstered Stacking Chairs&quot;</value>
            <value>&quot;Hon Deluxe Fabric Upholstered Stacking Chairs, Rounded Back&quot;</value>
            <value>&quot;Hon Every-Day® Chair Series Swivel Task Chairs&quot;</value>
            <value>&quot;Hon GuestStacker Chair&quot;</value>
            <value>&quot;Hon iLevel™ Computer Training Table&quot;</value>
            <value>&quot;Hon Metal Bookcases, Black&quot;</value>
            <value>&quot;Hon Metal Bookcases, Putty&quot;</value>
            <value>&quot;Hon Multipurpose Stacking Arm Chairs&quot;</value>
            <value>&quot;Hon Non-Folding Utility Tables&quot;</value>
            <value>&quot;Hon Olson Stacker Stools&quot;</value>
            <value>&quot;Hon Pagoda™ Stacking Chairs&quot;</value>
            <value>&quot;Hon Rectangular Conference Tables&quot;</value>
            <value>&quot;Hon Valutask™ Swivel Chairs&quot;</value>
          </bin>
          <bin value='&quot;Newell 307&quot;'>
            <value>&quot;Newell 307&quot;</value>
            <value>&quot;Newell 308&quot;</value>
            <value>&quot;Newell 309&quot;</value>
            <value>&quot;Newell 31&quot;</value>
            <value>&quot;Newell 310&quot;</value>
            <value>&quot;Newell 312&quot;</value>
            <value>&quot;Newell 314&quot;</value>
            <value>&quot;Newell 315&quot;</value>
            <value>&quot;Newell 318&quot;</value>
            <value>&quot;Newell 320&quot;</value>
            <value>&quot;Newell 321&quot;</value>
            <value>&quot;Newell 323&quot;</value>
            <value>&quot;Newell 325&quot;</value>
            <value>&quot;Newell 326&quot;</value>
            <value>&quot;Newell 327&quot;</value>
            <value>&quot;Newell 329&quot;</value>
            <value>&quot;Newell 332&quot;</value>
            <value>&quot;Newell 333&quot;</value>
            <value>&quot;Newell 335&quot;</value>
            <value>&quot;Newell 336&quot;</value>
            <value>&quot;Newell 337&quot;</value>
            <value>&quot;Newell 338&quot;</value>
            <value>&quot;Newell 339&quot;</value>
            <value>&quot;Newell 340&quot;</value>
            <value>&quot;Newell 342&quot;</value>
            <value>&quot;Newell 343&quot;</value>
            <value>&quot;Newell 346&quot;</value>
            <value>&quot;Newell 35&quot;</value>
            <value>&quot;Newell 351&quot;</value>
            <value>&quot;Newell® 3-Hole Punched Plastic Slotted Magazine Holders for Binders&quot;</value>
          </bin>
          <bin value='&quot;Sony IBM Color Diskettes, 25/Pack&quot;'>
            <value>&quot;Sony IBM Color Diskettes, 25/Pack&quot;</value>
            <value>&quot;Sony MFD2HD Formatted Diskettes, 10/Pack&quot;</value>
          </bin>
          <bin value='&quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;'>
            <value>&quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;</value>
            <value>&quot;Wilson Jones 1\&quot; Hanging DublLock® Ring Binders&quot;</value>
            <value>&quot;Wilson Jones 14 Line Acrylic Coated Pressboard Data Binders&quot;</value>
            <value>&quot;Wilson Jones Custom Binder Spines &amp; Labels&quot;</value>
            <value>&quot;Wilson Jones DublLock® D-Ring Binders&quot;</value>
            <value>&quot;Wilson Jones Easy Flow II™ Sheet Lifters&quot;</value>
            <value>&quot;Wilson Jones Elliptical Ring 3 1/2\&quot; Capacity Binders, 800 sheets&quot;</value>
            <value>&quot;Wilson Jones Hanging View Binder, White, 1\&quot;&quot;</value>
            <value>&quot;Wilson Jones Impact Binders&quot;</value>
            <value>&quot;Wilson Jones Ledger-Size, Piano-Hinge Binder, 2\&quot;, Blue&quot;</value>
            <value>&quot;Wilson Jones Standard D-Ring Binders&quot;</value>
            <value>&quot;Wilson Jones Suede Grain Vinyl Binders&quot;</value>
            <value>&quot;Wilson Jones Turn Tabs Binder Tool for Ring Binders&quot;</value>
            <value>&quot;Wilson Jones® Four-Pocket Poly Binders&quot;</value>
          </bin>
          <bin value='&quot;Xerox 188&quot;'>
            <value>&quot;Xerox 188&quot;</value>
            <value>&quot;Xerox 1880&quot;</value>
            <value>&quot;Xerox 1881&quot;</value>
            <value>&quot;Xerox 1882&quot;</value>
            <value>&quot;Xerox 1883&quot;</value>
            <value>&quot;Xerox 1885&quot;</value>
            <value>&quot;Xerox 1887&quot;</value>
            <value>&quot;Xerox 1888&quot;</value>
            <value>&quot;Xerox 1891&quot;</value>
            <value>&quot;Xerox 1892&quot;</value>
            <value>&quot;Xerox 1893&quot;</value>
            <value>&quot;Xerox 1894&quot;</value>
            <value>&quot;Xerox 1895&quot;</value>
            <value>&quot;Xerox 1896&quot;</value>
            <value>&quot;Xerox 1897&quot;</value>
            <value>&quot;Xerox 1898&quot;</value>
            <value>&quot;Xerox 1899&quot;</value>
            <value>&quot;Xerox 19&quot;</value>
            <value>&quot;Xerox 190&quot;</value>
            <value>&quot;Xerox 1903&quot;</value>
            <value>&quot;Xerox 1904&quot;</value>
            <value>&quot;Xerox 1905&quot;</value>
            <value>&quot;Xerox 1906&quot;</value>
            <value>&quot;Xerox 1907&quot;</value>
            <value>&quot;Xerox 1908&quot;</value>
            <value>&quot;Xerox 191&quot;</value>
            <value>&quot;Xerox 1910&quot;</value>
            <value>&quot;Xerox 1916&quot;</value>
            <value>&quot;Xerox 1917&quot;</value>
            <value>&quot;Xerox 1919&quot;</value>
            <value>&quot;Xerox 1920&quot;</value>
            <value>&quot;Xerox 1922&quot;</value>
            <value>&quot;Xerox 1923&quot;</value>
            <value>&quot;Xerox 1924&quot;</value>
            <value>&quot;Xerox 1926&quot;</value>
            <value>&quot;Xerox 1927&quot;</value>
            <value>&quot;Xerox 1928&quot;</value>
            <value>&quot;Xerox 1929&quot;</value>
            <value>&quot;Xerox 193&quot;</value>
            <value>&quot;Xerox 1930&quot;</value>
            <value>&quot;Xerox 1932&quot;</value>
            <value>&quot;Xerox 1933&quot;</value>
            <value>&quot;Xerox 1934&quot;</value>
            <value>&quot;Xerox 1935&quot;</value>
            <value>&quot;Xerox 1936&quot;</value>
            <value>&quot;Xerox 1937&quot;</value>
            <value>&quot;Xerox 1938&quot;</value>
            <value>&quot;Xerox 1939&quot;</value>
            <value>&quot;Xerox 194&quot;</value>
            <value>&quot;Xerox 1940&quot;</value>
            <value>&quot;Xerox 1941&quot;</value>
            <value>&quot;Xerox 1947&quot;</value>
            <value>&quot;Xerox 1948&quot;</value>
            <value>&quot;Xerox 1949&quot;</value>
            <value>&quot;Xerox 195&quot;</value>
            <value>&quot;Xerox 1950&quot;</value>
            <value>&quot;Xerox 1951&quot;</value>
            <value>&quot;Xerox 1952&quot;</value>
            <value>&quot;Xerox 1953&quot;</value>
            <value>&quot;Xerox 1954&quot;</value>
            <value>&quot;Xerox 1959&quot;</value>
            <value>&quot;Xerox 196&quot;</value>
            <value>&quot;Xerox 1961&quot;</value>
            <value>&quot;Xerox 1962&quot;</value>
            <value>&quot;Xerox 1963&quot;</value>
            <value>&quot;Xerox 1964&quot;</value>
            <value>&quot;Xerox 1966&quot;</value>
            <value>&quot;Xerox 1968&quot;</value>
            <value>&quot;Xerox 197&quot;</value>
            <value>&quot;Xerox 1971&quot;</value>
            <value>&quot;Xerox 1972&quot;</value>
            <value>&quot;Xerox 1973&quot;</value>
            <value>&quot;Xerox 1974&quot;</value>
            <value>&quot;Xerox 1976&quot;</value>
            <value>&quot;Xerox 1977&quot;</value>
            <value>&quot;Xerox 1978&quot;</value>
            <value>&quot;Xerox 1979&quot;</value>
            <value>&quot;Xerox 198&quot;</value>
            <value>&quot;Xerox 1980&quot;</value>
            <value>&quot;Xerox 1981&quot;</value>
            <value>&quot;Xerox 1982&quot;</value>
            <value>&quot;Xerox 1983&quot;</value>
            <value>&quot;Xerox 1984&quot;</value>
            <value>&quot;Xerox 1985&quot;</value>
            <value>&quot;Xerox 1986&quot;</value>
            <value>&quot;Xerox 1988&quot;</value>
            <value>&quot;Xerox 1989&quot;</value>
            <value>&quot;Xerox 199&quot;</value>
            <value>&quot;Xerox 1991&quot;</value>
            <value>&quot;Xerox 1992&quot;</value>
            <value>&quot;Xerox 1993&quot;</value>
            <value>&quot;Xerox 1994&quot;</value>
            <value>&quot;Xerox 1995&quot;</value>
            <value>&quot;Xerox 1996&quot;</value>
            <value>&quot;Xerox 1997&quot;</value>
            <value>&quot;Xerox 1998&quot;</value>
            <value>&quot;Xerox 2&quot;</value>
            <value>&quot;Xerox 20&quot;</value>
            <value>&quot;Xerox 200&quot;</value>
            <value>&quot;Xerox 204&quot;</value>
            <value>&quot;Xerox 207&quot;</value>
            <value>&quot;Xerox 209&quot;</value>
            <value>&quot;Xerox 21&quot;</value>
            <value>&quot;Xerox 210&quot;</value>
            <value>&quot;Xerox 212&quot;</value>
            <value>&quot;Xerox 213&quot;</value>
            <value>&quot;Xerox 214&quot;</value>
            <value>&quot;Xerox 215&quot;</value>
            <value>&quot;Xerox 216&quot;</value>
            <value>&quot;Xerox 217&quot;</value>
            <value>&quot;Xerox 220&quot;</value>
            <value>&quot;Xerox 221&quot;</value>
            <value>&quot;Xerox 223&quot;</value>
            <value>&quot;Xerox 224&quot;</value>
            <value>&quot;Xerox 226&quot;</value>
            <value>&quot;Xerox 227&quot;</value>
            <value>&quot;Xerox 229&quot;</value>
            <value>&quot;Xerox 23&quot;</value>
            <value>&quot;Xerox 231&quot;</value>
            <value>&quot;Xerox 4200 Series MultiUse Premium Copy Paper (20Lb. and 84 Bright)&quot;</value>
            <value>&quot;Xerox Blank Computer Paper&quot;</value>
          </bin>
        </calculation>
        <aliases>
          <alias key='&quot;*Staples* Highlighting Markers&quot;' value='Staples' />
          <alias key='&quot;3M Hangers With Command Adhesive&quot;' value='3M' />
          <alias key='&quot;Acco 3-Hole Punch&quot;' value='Acco' />
          <alias key='&quot;Acme Design Line 8\&quot; Stainless Steel Bent Scissors w/Champagne Handles, 3-1/8\&quot; Cut&quot;' value='Acme' />
          <alias key='&quot;Avery 05222 Permanent Self-Adhesive File Folder Labels for Typewriters, on Rolls, White, 250/Roll&quot;' value='Avery' />
          <alias key='&quot;Belkin 105-Key Black Keyboard&quot;' value='Belkin' />
          <alias key='&quot;Boston 1645 Deluxe Heavier-Duty Electric Pencil Sharpener&quot;' value='Boston' />
          <alias key='&quot;Canon BP1200DH 12-Digit Bubble Jet Printing Calculator&quot;' value='Canon' />
          <alias key='&quot;Eldon Advantage® Chair Mats for Low to Medium Pile Carpets&quot;' value='Eldon' />
          <alias key='&quot;Epson C62 Color Inkjet Printer&quot;' value='Epson' />
          <alias key='&quot;Fellowes 17-key keypad for PS/2 interface&quot;' value='Fellowes' />
          <alias key='&quot;Hon 2090 “Pillow Soft” Series Mid Back Swivel/Tilt Chairs&quot;' value='Hon' />
          <alias key='&quot;Newell 307&quot;' value='Newell' />
          <alias key='&quot;Sony IBM Color Diskettes, 25/Pack&quot;' value='Sony' />
          <alias key='&quot;Wilson Jones “Snap” Scratch Pad Binder Tool for Ring Binders&quot;' value='Wilson Jones' />
          <alias key='&quot;Xerox 188&quot;' value='Xerox' />
          <alias key='&quot;Zoom V.92 V.44 PCI Internal Controllerless FaxModem&quot;' value='Other' />
        </aliases>
      </column>
      <column aggregation='Avg' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Unit Price]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Versandart]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' hidden='true' name='[Year Month]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' hidden='true' name='[Z Calc Order ID]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Z City Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
      </column>
      <column datatype='datetime' hidden='true' name='[Z Date first order]' role='dimension' type='ordinal'>
      </column>
      <column datatype='real' hidden='true' name='[Z Lookup Order ID]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' hidden='true' name='[Z Order ID]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[Z Order amount percentile]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' hidden='true' name='[Z Running sales]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' hidden='true' name='[产品子类别]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[产品容器]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[产品类别]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[出荷モード]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[客户细分]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[注文の優先度]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[装运模式]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[製品カテゴリー]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[製品コンテナー]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[製品サブカテゴリー]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[订单优先级]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[顧客区分]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[고객 세그먼트]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[선적 모드]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[제품 범주]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[제품 컨테이너]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[제품 하위 범주]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' hidden='true' name='[주문 우선 순위]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[Profit]' derivation='Sum' forecast-column-base='[sum:Profit:qk]' forecast-column-type='forecast-value' name='[fVal:sum:Profit:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales]' derivation='Sum' forecast-column-base='[sum:Sales:qk]' forecast-column-type='forecast-value' name='[fVal:sum:Sales:qk]' pivot='key' type='quantitative' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1641214165608856]' derivation='Sum' name='[sum:Calculation_1641214165608856:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8821129170240873]' derivation='Sum' name='[sum:Calculation_8821129170240873:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales est (copy)]' derivation='Sum' name='[sum:Sales est (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_9100813121824802]' derivation='User' name='[usr:Calculation_9100813121824802:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Action (Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Product Sub-Category]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Country,YEAR(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Customer Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Customer Segment]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Department,Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Product Category]' />
          <groupfilter function='level-members' level='[Product Sub-Category]' />
        </groupfilter>
      </group>
      <group caption='Countries - high profit &amp; sales' name='[Countries - high avg profit &amp; sales]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Côte-d&apos;Ivoire&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
          <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Country / Region,State)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Country:nk]' />
          <groupfilter function='level-members' level='[none:State or Province:nk]' />
        </groupfilter>
      </group>
      <group caption='Top Customers by Profit' name='[Highest profit customers]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='[Parameters].[Parameter 2]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Customer Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <group hidden='true' name='[Inclusions (City,Country / Region,State)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:City:nk]' />
          <groupfilter function='level-members' level='[none:Country:nk]' />
          <groupfilter function='level-members' level='[none:State or Province:nk]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Inclusions (Country / Region,State)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Country:nk]' />
          <groupfilter function='level-members' level='[none:State or Province:nk]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='ID fields'>
          <field>[Customer ID]</field>
          <field>[Order ID]</field>
          <field>[Row ID]</field>
          <desc>
            <formatted-text>
              <run>All ID fields from coarse to fine grain</run>
            </formatted-text>
          </desc>
        </drill-path>
        <drill-path name='Mapping items'>
          <field>[Country]</field>
          <field>[State or Province]</field>
          <field>[City]</field>
          <field>[Postal Code]</field>
          <desc>
            <formatted-text>
              <run>Filled maps available for 1st two levels</run>
            </formatted-text>
          </desc>
        </drill-path>
        <drill-path name='Product'>
          <field>[Product Category]</field>
          <field>[Product Sub-Category]</field>
          <field>[Product Name]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.450549' group-percentage='0.230769' measure-ordering='alphabetic' measure-percentage='0.285714' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Côte-d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Democratic People&apos;s Republic of Korea&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Continent:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Australasia&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Order Date:ok]' type='palette'>
            <map to='#1c73b1'>
              <bucket>2012</bucket>
            </map>
            <map to='#67add4'>
              <bucket>2011</bucket>
            </map>
            <map to='#b4d4da'>
              <bucket>2010</bucket>
            </map>
            <map to='#d62728'>
              <bucket>2013</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]&#10;[yr:Order Date:ok]' type='palette'>
            <map to='#26456e'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Profit:qk]&quot;</bucket>
                <bucket>2013</bucket>
              </multibucket>
            </map>
            <map to='#69afd5'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Profit:qk]&quot;</bucket>
                <bucket>2012</bucket>
              </multibucket>
            </map>
            <map to='#7b3014'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Sales:qk]&quot;</bucket>
                <bucket>2013</bucket>
              </multibucket>
            </map>
            <map to='#90ccdf'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Profit:qk]&quot;</bucket>
                <bucket>2011</bucket>
              </multibucket>
            </map>
            <map to='#b4d4da'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Profit:qk]&quot;</bucket>
                <bucket>2010</bucket>
              </multibucket>
            </map>
            <map to='#d74401'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Sales:qk]&quot;</bucket>
                <bucket>2012</bucket>
              </multibucket>
            </map>
            <map to='#f0c294'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Sales:qk]&quot;</bucket>
                <bucket>2010</bucket>
              </multibucket>
            </map>
            <map to='#fd8938'>
              <multibucket>
                <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Sales:qk]&quot;</bucket>
                <bucket>2011</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Calculation_1641214165608856:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[usr:Calculation_9100813121824802:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales new:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Sales:qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[fVal:sum:Profit:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Calculation_8821129170240873:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit new:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales est (copy):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Forecast Indicator:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Actual&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Estimate&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Region:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Central&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;West&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;South&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;East&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Challenge 2'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
            </column>
            <column caption='Department' datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Customer Segment]' derivation='None' name='[none:Customer Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Challenge 3'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column caption='Department' datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[Product Sub-Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Sub-Category]' derivation='None' name='[none:Product Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]' field-type='quantitative' max='21218134.136815168' min='-20763002.831952088' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' max='18691956.563341983' min='-6877949.6745561268' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]' />
              <size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' />
              <wedge-size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Sub-Category:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.4806630611419678' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Challenge 4'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer Segment]' derivation='None' name='[none:Customer Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (City,Country / Region,State)]'>
            <groupfilter function='reorder-dimensionality' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ontario&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Toronto&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Quebec&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Montreal&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nuevo León&quot;' />
                    <groupfilter function='member' level='[none:City:nk]' member='&quot;Monterrey&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bessemer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Birmingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Enterprise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gadsden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Homewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Opelika&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phenix City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prattville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Selma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Talladega&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tuscaloosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vestavia Hills&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Avondale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bullhead City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casas Adobes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Mirage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flagstaff&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glendale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goodyear&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oro Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phoenix&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prescott&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prescott Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scottsdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sierra Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sun City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Surprise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tempe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tucson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yuma&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arkansas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bella Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Benton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bentonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bryant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cabot&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fayetteville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Smith&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hot Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jonesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Little Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Little Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paragould&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pine Bluff&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rogers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Russellville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Searcy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sherwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texarkana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Van Buren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Memphis&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Antioch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apple Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atascadero&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Berkeley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beverly Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burbank&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Calexico&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camarillo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carlsbad&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chula Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Citrus Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Claremont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coachella&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Costa Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Daly City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Los Angeles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Cajon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Centro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Dorado Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Escondido&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eureka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Foster City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilroy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goleta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granite Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hacienda Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hemet&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hesperia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntington Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inglewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Quinta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laguna Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laguna Niguel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Elsinore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawndale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lemon Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lodi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Altos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Angeles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Banos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Gatos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manhattan Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manteca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Menlo Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mission Viejo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Modesto&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montebello&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moreno Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mountain View&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murrieta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Napa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ontario&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxnard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pacifica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palo Alto&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paradise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Petaluma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pico Rivera&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rancho Cucamonga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redding&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redlands&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redondo Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redwood City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riverside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rocklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sacramento&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salinas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Bernardino&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Carlos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Clemente&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Gabriel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Jose&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Luis Obispo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Mateo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Ramon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Barbara&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Clara&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Cruz&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Maria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Monica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Rosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saratoga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Lake Tahoe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stockton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sunnyvale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Temecula&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thousand Oaks&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tracy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Twentynine Palms&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vacaville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vallejo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Visalia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Hollywood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westminster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Whittier&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yuba City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yucaipa&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arvada&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boulder&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Broomfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Castle Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colorado Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Commerce City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Denver&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Durango&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Englewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Collins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fountain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Junction&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greeley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highlands Ranch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Littleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Louisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Loveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northglenn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pueblo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pueblo West&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thornton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westminster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheat Ridge&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Connecticut&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ansonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Branford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheshire&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Darien&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Hartford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glastonbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Guilford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hamden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hartford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Killingly Center&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meriden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Naugatuck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Britain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New London&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwalk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seymour&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shelton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Windsor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stamford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stratford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trumbull&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wallingford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willimantic&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Delaware&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;District of Columbia&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Washington&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Florida&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altamonte Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apopka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belle Glade&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boca Raton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boynton Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bradenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brandon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carol City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casselberry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coconut Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coral Gables&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coral Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deerfield Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Delray Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deltona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dunedin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Myers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Pierce&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fruit Cove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hialeah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hollywood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Homestead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Immokalee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jupiter&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kendall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kissimmee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Worth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Land O Lakes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lehigh Acres&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Margate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Melbourne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merritt Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Miramar&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Smyrna Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Miami&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Miami Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Port&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ocoee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orlando&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ormond Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oviedo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Beach Gardens&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Coast&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Harbor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Panama City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pensacola&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pine Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plant City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plantation&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Poinciana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pompano Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ponte Vedra Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Charlotte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Saint Lucie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riverview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riviera Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Royal Palm Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Cloud&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Petersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sarasota&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seminole&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sunrise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tallahassee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tamarac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Titusville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Palm Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Garden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Springs&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Georgia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Athens&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atlanta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Augusta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dalton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Douglasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dunwoody&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Evans&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Forest Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hinesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kennesaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Grange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Macon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marietta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Martinez&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newnan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peachtree City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rome&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roswell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandy Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Savannah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smyrna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Statesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tucker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warner Robins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodstock&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Idaho&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Caldwell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coeur D Alene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Idaho Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewiston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meridian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moscow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nampa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pocatello&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Post Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rexburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Illinois&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Addison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Batavia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belleville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belvidere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bolingbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burbank&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Calumet City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carbondale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carol Stream&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carpentersville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Champaign&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Collinsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Country Club Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crystal Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Plaines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Downers Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Saint Louis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elgin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elk Grove Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Evanston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Forest Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frankfort&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Freeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Galesburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Ellyn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glendale Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glenview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granite City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gurnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoffman Estates&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Joliet&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kankakee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake In The Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lombard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Melrose Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moline&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Prospect&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mundelein&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Naperville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Normal&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Lawn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oswego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palatine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Park Ridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pekin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Romeoville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schaumburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Skokie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Streamwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tinley Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Urbana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vernon Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waukegan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheaton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodstock&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Indiana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carmel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crown Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elkhart&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Wayne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frankfort&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gary&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granger&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hammond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hobart&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Indianapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jeffersonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kokomo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Porte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merrillville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Michigan City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mishawaka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muncie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Munster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Castle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schererville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seymour&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Bend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Terre Haute&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Valparaiso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vincennes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Lafayette&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Iowa&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ames&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ankeny&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bettendorf&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coralville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Council Bluffs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davenport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Moines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dubuque&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Dodge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Iowa City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marshalltown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mason City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muscatine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ottumwa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sioux City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Urbandale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterloo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Des Moines&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Derby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dodge City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Emporia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garden City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hays&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hutchinson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kansas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leavenworth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leawood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lenexa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Liberal&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manhattan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olathe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Overland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pittsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prairie Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shawnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Topeka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wichita&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kentucky&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowling Green&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Covington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Thomas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Georgetown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkinsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Louisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murray&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nicholasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owensboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paducah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasure Ridge Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Louisiana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alexandria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baton Rouge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bossier City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Houma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marrero&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Metairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Iberia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Orleans&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shreveport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Slidell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Terrytown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maine&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Augusta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bangor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Biddeford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gorham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewiston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Scarborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westbrook&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maryland&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Annapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aspen Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethesda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camp Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Catonsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crofton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cumberland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dundalk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edgewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ellicott City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Essex&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gaithersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Burnie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hagerstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laurel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middle River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Odenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olney&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owings Mills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Perry Hall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pikesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Potomac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Randallstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reisterstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Severna Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Silver Spring&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waldorf&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Massachusetts&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Abington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Acton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Agawam&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Amesbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Andover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ashland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Attleboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belchertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beverly&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Billerica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bourne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Braintree&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgewater&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookline&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cambridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicopee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danvers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dedham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dennis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dracut&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duxbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Longmeadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easthampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairhaven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fall River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Falmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fitchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Foxborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Framingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gardner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gloucester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grafton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Groton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Haverhill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holyoke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ipswich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leominster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lexington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longmeadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lowell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ludlow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lunenburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Malden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marblehead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marlborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marshfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Natick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Needham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newburyport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Andover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Pembroke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palmer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pepperell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reading&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Revere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saugus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scituate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sharon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shrewsbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerset&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Boston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Hadley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southbridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stoneham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stoughton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sudbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Swansea&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taunton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tewksbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Townsend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wakefield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walpole&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waltham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Webster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wellesley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilbraham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winthrop&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Worcester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yarmouth&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Michigan&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Adrian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ann Arbor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Battle Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bay City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dearborn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dearborn Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Detroit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eastpointe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flint&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garden City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inkster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kalamazoo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lincoln Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Livonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Pleasant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskegon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Novi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owosso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pontiac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Huron&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Royal Oak&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saginaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Clair Shores&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sault Sainte Marie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shelby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southgate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sterling Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taylor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wyoming&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Minnesota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apple Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Blaine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn Center&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burnsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coon Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cottage Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duluth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eden Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edina&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fridley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inver Grove Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lino Lakes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mankato&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maple Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maplewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minnetonka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minnetonka Mills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moorhead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owatonna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prior Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Red Wing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Cloud&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Louis Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Paul&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Savage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shakopee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shoreview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodbury&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Mississippi&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Biloxi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gulfport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hattiesburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Horn Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meridian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olive Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pearl&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tupelo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vicksburg&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clayton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Creve Coeur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ferguson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florissant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gladstone&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hazelwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Independence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jefferson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Joplin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kansas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kirkwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lees Summit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maryland Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mehlville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Overland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ozark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Raytown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Joseph&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Louis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;University City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Webster Groves&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wentzville&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Montana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Billings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bozeman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Butte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Great Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Helena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kalispell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Missoula&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nebraska&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellevue&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fremont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hastings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearney&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lincoln&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norfolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Platte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Omaha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Papillion&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nevada&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Las Vegas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pahrump&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reno&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sparks&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Hampshire&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Derry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goffstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laconia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Londonderry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merrimack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashua&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portsmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Jersey&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asbury Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atlantic City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Avenel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bayonne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belleville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bergenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carteret&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cherry Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cliffside Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clifton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dumont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elizabeth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmwood Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Englewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ewing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fair Lawn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fords&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glassboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hackensack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hawthorne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hillside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoboken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopatcong&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Irvington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Iselin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jersey City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearny&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Linden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lindenwold&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Livingston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lodi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lyndhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maple Shade&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maplewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Millville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montclair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Bergen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nutley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ocean City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Old Bridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palisades Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paramus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parsippany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paterson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pennsauken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Perth Amboy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phillipsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasantville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rahway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ridgewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roselle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rutherford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sayreville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scotch Plains&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Secaucus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerset&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Vineland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Summit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Teaneck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tinton Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Toms River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Union&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Union City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wayne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willingboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodbridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wyckoff&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Mexico&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alamogordo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albuquerque&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carlsbad&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clovis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hobbs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Las Cruces&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rio Rancho&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roswell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Fe&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New York&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethpage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Binghamton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Centereach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Central Islip&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheektowaga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cohoes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Commack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coram&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deer Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Depew&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dix Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Massapequa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Meadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmira&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin Square&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Freeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Cove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hempstead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hicksville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ithaca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jamestown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenmore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Levittown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lindenhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Rochelle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Niagara Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Babylon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Tonawanda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ossining&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Chester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rome&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roosevelt&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rotterdam&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rye&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scarsdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schenectady&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shirley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smithtown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Syracuse&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tonawanda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Utica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Valley Stream&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Babylon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Islip&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Seneca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;White Plains&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodmere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Carolina&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albemarle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apex&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asheboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asheville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cary&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chapel Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cornelius&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Durham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fayetteville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Bragg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gastonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goldsboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hickory&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;High Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Indian Trail&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kannapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laurinburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mint Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mooresville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Bern&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Raleigh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rocky Mount&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salisbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thomasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wake Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilson&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Dakota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bismarck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dickinson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fargo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Forks&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mandan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minot&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ohio&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Austintown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beavercreek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Berea&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boardman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowling Green&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cincinnati&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cuyahoga Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dayton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Delaware&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elyria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Euclid&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairborn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Findlay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gahanna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garfield Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grove City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hamilton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hilliard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huber Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kent&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kettering&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lima&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lorain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mason&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Massillon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Olmsted&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Ridgeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Royalton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reynoldsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandusky&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shaker Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Steubenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Strongsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Upper Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westlake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Whitehall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willoughby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wooster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Xenia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Youngstown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oklahoma&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bartlesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Enid&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midwest City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mustang&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oklahoma City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owasso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ponca City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shawnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stillwater&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tulsa&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oregon&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aloha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beaverton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coos Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corvallis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eugene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grants Pass&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gresham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hillsboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keizer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Klamath Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Oswego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mcminnville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oregon City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pendleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tigard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troutdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tualatin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Linn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodburn&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Pennsylvania&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allentown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altoona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baldwin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethel Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethlehem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chambersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Drexel Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Erie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hazleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hermitage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;King of Prussia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Levittown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;McKeesport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Lebanon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Penn Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Philadelphia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pittsburgh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plum&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pottstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Radnor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reading&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scranton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sharon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;State College&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Upper Saint Clair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Mifflin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilkes Barre&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilkinsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willow Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;York&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Rhode Island&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Barrington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Central Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coventry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cumberland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Providence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Kingstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pawtucket&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smithfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tiverton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warwick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westerly&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woonsocket&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Carolina&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aiken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hilton Head Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mauldin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Pleasant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Myrtle Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spartanburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Summerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taylors&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Dakota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aberdeen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rapid City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sioux Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Tennessee&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bartlett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chattanooga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clarksville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Collierville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farragut&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gallatin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Germantown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greeneville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hendersonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Johnson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingsport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Vergne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lebanon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maryville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murfreesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Ridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smyrna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring Hill&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Abilene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Amarillo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Austin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baytown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beaumont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brownsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bryan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burleson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carrollton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Channelview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleburne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cloverleaf&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Station&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Conroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coppell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corpus Christi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corsicana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deer Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Denton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duncanville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagle Pass&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edinburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Euless&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmers Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flower Mound&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Worth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Friendswood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frisco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Georgetown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grapevine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Haltom City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harker Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harlingen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Irving&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keller&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Killeen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Porte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laredo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;League City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leander&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lubbock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lufkin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mcallen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesquite&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mineral Wells&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Missouri City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Odessa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paris&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pearland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pflugerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pharr&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Arthur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richardson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rosenberg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Round Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rowlett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saginaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Angelo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Juan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Marcos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seguin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sherman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sugar Land&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sulphur Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texarkana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;The Colony&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;The Woodlands&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tyler&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Victoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watauga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waxahachie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weatherford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weslaco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wichita Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wylie&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Utah&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;American Fork&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bountiful&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clearfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Draper&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holladay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kaysville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearns&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Layton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lehi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Logan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Magna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midvale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murray&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ogden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasant Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salt Lake City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spanish Fork&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tooele&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Jordan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Valley City&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Vermont&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bennington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Essex Junction&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rutland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Burlington&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Virginia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alexandria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Annandale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Blacksburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlottesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colonial Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dale City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfax&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Herndon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mechanicsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montclair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norfolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Petersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portsmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roanoke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rose Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tysons Corner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waynesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winchester&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Washington&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anacortes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellevue&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bothell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bremerton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burien&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cottage Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Covington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Moines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elk Plain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Federal Way&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Issaquah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kennewick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kent&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kirkland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lacey&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynnwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marysville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olympia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pullman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Puyallup&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Renton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seatac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spanaway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tacoma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vancouver&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walla Walla&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wenatchee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yakima&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;West Virginia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beckley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clarksburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgantown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wisconsin&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Appleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cudahy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eau Claire&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fitchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Green Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Janesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenosha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Crosse&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manitowoc&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Menomonee Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Neenah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Berlin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oshkosh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Racine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sheboygan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stevens Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sun Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Superior&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waukesha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wausau&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wauwatosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Allis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Bend&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wyoming&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casper&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheyenne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gillette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laramie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Springs&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
              <order>
                <hierarchy name='[none:City:nk]' />
                <hierarchy name='[none:Country:nk]' />
                <hierarchy name='[none:State or Province:nk]' />
              </order>
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (City,Country / Region,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]' field-type='quantitative' max='-6825826.4189560357' min='-14602815.154209875' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' max='7683427.80062229' min='1207216.5406600167' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' palette='tableau-red-green' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:City:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)])</rows>
        <cols>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)])</cols>
      </table>
    </worksheet>
    <worksheet name='Challenge 5'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer Segment]' derivation='None' name='[none:Customer Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]'>
            <groupfilter function='crossjoin' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' max='8155008.7702081762' min='-15738.541265627835' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]' field-type='quantitative' max='-10347288.724269435' min='-13845716.805000037' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' palette='tableau-red-green' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <geometry column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</rows>
        <cols>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)])</cols>
      </table>
    </worksheet>
    <worksheet name='Challenge 6'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Shipping Cost]' role='measure' type='quantitative'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Shipping Cost]' derivation='Avg' name='[avg:Shipping Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]'>
            <groupfilter function='crossjoin' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arkansas&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Connecticut&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Delaware&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;District of Columbia&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Florida&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Georgia&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Idaho&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Illinois&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Indiana&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Iowa&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kentucky&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Louisiana&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maine&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maryland&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Massachusetts&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Michigan&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Minnesota&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Mississippi&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Montana&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nebraska&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nevada&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Hampshire&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Jersey&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Mexico&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New York&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Carolina&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Dakota&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ohio&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oklahoma&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oregon&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Pennsylvania&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Rhode Island&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Carolina&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Dakota&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Tennessee&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Utah&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Vermont&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Virginia&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Washington&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;West Virginia&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wisconsin&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wyoming&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]'>
            <groupfilter function='member' level='[none:Ship Mode:nk]' member='&quot;Delivery Truck&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]</column>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]' palette='area-green' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <geometry column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)])</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</cols>
        <mark-labels>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</field>
                  </x-fields>
                  <y-fields>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>45.602790697674422</value>
                <value>&quot;United States of America&quot;</value>
                <value>&quot;Delivery Truck&quot;</value>
                <value>&quot;Michigan&quot;</value>
                <value>&quot;MULTIPOLYGON (((-88.8056 47.9733,-88.9255 47.9264,-88.9551 47.8951,-89.0941 47.8534,-89.1619 47.8499,-89.2053 47.8603,-89.2227 47.876,-89.2123 47.8951,-89.1758 47.9194,-88.9707 48.0063,-88.5797 48.1488,-88.505 48.1645,-88.4719 48.1627,-88.4858 48.1419,-88.6353 48.0411,-88.8056 47.9733)),((-86.4595 45.7627,-86.5672 45.7019,-86.6246 45.6359,-86.6697 45.6411,-86.6889 45.6567,-86.6923 45.6776,-86.6402 45.7471,-86.5637 45.8218,-86.5533 45.8514,-86.5637 45.8705,-86.5915 45.8739,-86.668 45.8514,-86.7636 45.8496,-86.8644 45.7453,-86.9287 45.7193,-86.9617 45.728,-86.993 45.7923,-87.0104 45.8131,-87.0295 45.8149,-87.0486 45.7957,-87.0712 45.7384,-87.0973 45.7036,-87.1981 45.6202,-87.2502 45.549,-87.3545 45.4099,-87.5891 45.1423,-87.5908 45.0971,-87.6603 45.1075,-87.6829 45.144,-87.7368 45.1718,-87.742 45.1979,-87.7264 45.2101,-87.7246 45.2327,-87.6864 45.2987,-87.6482 45.3404,-87.6569 45.3682,-87.6986 45.3891,-87.7577 45.3491,-87.8324 45.3526,-87.8498 45.3404,-87.8706 45.3561,-87.8758 45.3786,-87.8498 45.4047,-87.8619 45.4343,-87.8133 45.4638,-87.7924 45.5003,-87.8028 45.5385,-87.8324 45.5681,-87.7907 45.5646,-87.775 45.6011,-87.8237 45.648,-87.8237 45.6619,-87.7837 45.6724,-87.8115 45.7106,-87.8463 45.7227,-87.8776 45.754,-87.9627 45.7592,-87.9888 45.7714,-87.9923 45.7957,-88.0583 45.7801,-88.0931 45.7853,-88.1365 45.8183,-88.0705 45.8722,-88.1 45.8826,-88.107 45.9018,-88.0948 45.9157,-88.1174 45.9209,-88.1904 45.9522,-88.2356 45.9487,-88.2477 45.9626,-88.2929 45.9504,-88.3816 45.9921,-88.4163 45.9747,-88.458 45.9991,-88.4893 45.9921,-88.5102 46.0199,-88.5658 46.0165,-88.5884 46.006,-88.6023 46.0182,-88.6144 45.9886,-88.6631 45.9921,-88.684 46.0147,-88.7187 46.013,-88.7396 46.0269,-88.7587 46.0199,-88.7969 46.0338,-88.816 46.0199,-88.9325 46.0738,-88.9916 46.0981,-89.0958 46.1398,-89.93 46.2997,-90.1212 46.338,-90.1194 46.3588,-90.1577 46.4092,-90.1681 46.4422,-90.2307 46.51,-90.2724 46.5048,-90.2776 46.5239,-90.3158 46.517,-90.3089 46.5378,-90.3332 46.5535,-90.3506 46.5396,-90.394 46.5326,-90.4166 46.5674,-90.0847 46.6768,-89.8935 46.762,-89.7788 46.8055,-89.3965 46.868,-89.2644 46.9132,-89.1567 46.9619,-88.9968 47.0123,-88.9342 47.047,-88.8143 47.1322,-88.5832 47.2521,-88.5223 47.2903,-88.4459 47.3372,-88.3659 47.3772,-88.2582 47.4172,-88.1609 47.4415,-88.0218 47.4589,-87.8845 47.4589,-87.7959 47.445,-87.7611 47.4311,-87.7664 47.412,-87.9193 47.379,-87.9454 47.365,-87.9923 47.3216,-88.1991 47.2034,-88.2026 47.1999,-88.3468 47.0592,-88.425 46.9584,-88.432 46.9445,-88.4546 46.8993,-88.465 46.8506,-88.4598 46.8211,-88.4459 46.8107,-88.4181 46.8176,-88.2495 46.9132,-88.1852 46.9393,-88.1591 46.941,-88.1504 46.9271,-88.1209 46.9167,-88.0444 46.9097,-87.9419 46.9028,-87.8098 46.8784,-87.7246 46.8402,-87.6812 46.8298,-87.6325 46.7985,-87.5022 46.6595,-87.4066 46.5847,-87.3649 46.5343,-87.3215 46.5152,-87.238 46.5031,-87.1146 46.5083,-87.0417 46.51,-86.986 46.5013,-86.8766 46.4492,-86.8505 46.444,-86.7688 46.4683,-86.7167 46.4596,-86.7028 46.4648,-86.6906 46.5204,-86.6767 46.5378,-86.6454 46.5291,-86.6228 46.4892,-86.5846 46.4874,-86.2266 46.6264,-86.1345 46.6508,-85.8634 46.6786,-85.5054 46.6994,-85.2864 46.7325,-85.236 46.7359,-85.0205 46.7533,-85.0014 46.7394,-85.024 46.6664,-85.0379 46.5326,-85.0309 46.51,-85.0083 46.4926,-84.8519 46.4666,-84.6416 46.4631,-84.5408 46.4388,-84.4887 46.4492,-84.4088 46.4874,-84.3288 46.5013,-84.2802 46.4926,-84.2437 46.51,-84.2159 46.5135,-84.1655 46.5083,-84.1411 46.4805,-84.1342 46.4214,-84.1377 46.3762,-84.1255 46.3258,-84.1307 46.2737,-84.1516 46.2441,-84.2054 46.2215,-84.2228 46.2041,-84.2228 46.1868,-84.2037 46.1746,-84.129 46.1659,-84.0629 46.1346,-84.0351 46.0825,-83.9882 46.0547,-83.9135 46.0234,-83.8179 46.013,-83.7936 46.0234,-83.7883 46.0669,-83.7744 46.086,-83.6563 46.0842,-83.5937 46.0651,-83.5138 45.9956,-83.5138 45.9695,-83.5416 45.9435,-83.592 45.933,-83.6702 45.9365,-83.9204 45.9591,-84.1151 45.9643,-84.1568 45.9661,-84.3097 45.9608,-84.4018 45.9695,-84.5183 45.9869,-84.5652 46.0182,-84.6434 46.0356,-84.6677 46.0321,-84.7233 45.9417,-84.7337 45.8705,-84.7668 45.8635,-84.8172 45.8792,-85.0414 46.006,-85.1248 46.0338,-85.3229 46.0808,-85.4167 46.0912,-85.4984 46.0842,-85.5367 46.0721,-85.6514 45.9991,-85.7122 45.9782,-85.8668 45.9608,-85.9468 45.94,-86.0789 45.9556,-86.1953 45.9522,-86.2735 45.9261,-86.31 45.8965,-86.3708 45.8149,-86.4595 45.7627)),((-84.593 45.8166,-84.6243 45.8496,-84.6208 45.8618,-84.5495 45.827,-84.4314 45.7923,-84.4018 45.7714,-84.4053 45.754,-84.4348 45.7471,-84.4904 45.7592,-84.593 45.8166)),((-85.5088 45.7332,-85.5054 45.648,-85.5193 45.6202,-85.554 45.6028,-85.5888 45.6063,-85.601 45.6272,-85.5923 45.6689,-85.554 45.7332,-85.5158 45.7419,-85.5088 45.7332)),((-85.7921 41.7586,-86.0632 41.7604,-86.2266 41.7604,-86.5238 41.7604,-86.8244 41.7604,-86.708 41.8403,-86.6315 41.9081,-86.5637 41.9898,-86.383 42.2418,-86.3256 42.3374,-86.2892 42.419,-86.277 42.4468,-86.2457 42.5546,-86.2196 42.6936,-86.2196 42.7666,-86.2301 42.8831,-86.2579 43.0186,-86.2961 43.1194,-86.3117 43.1611,-86.456 43.4687,-86.4994 43.5626,-86.5133 43.6338,-86.5012 43.6946,-86.4699 43.7676,-86.4612 43.818,-86.4577 43.8424,-86.4699 43.9379,-86.4873 44.0075,-86.4873 44.0561,-86.4629 44.1048,-86.4039 44.1795,-86.3152 44.3099,-86.2735 44.402,-86.2457 44.5149,-86.2388 44.5445,-86.2422 44.6453,-86.2353 44.68,-86.2092 44.7026,-86.1275 44.7356,-86.0997 44.7547,-86.0876 44.7739,-86.0823 44.7826,-86.0528 44.8903,-85.9364 44.9459,-85.8182 44.965,-85.7817 44.9946,-85.6235 45.1614,-85.5645 45.1875,-85.554 45.1701,-85.5853 45.1371,-85.594 45.1093,-85.587 45.0658,-85.6374 44.8469,-85.6305 44.8034,-85.6149 44.7895,-85.594 44.793,-85.5506 44.8573,-85.5401 44.9164,-85.5141 44.9511,-85.4932 44.9668,-85.481 44.9494,-85.5123 44.8694,-85.5523 44.7843,-85.5419 44.7669,-85.5245 44.7669,-85.5054 44.7843,-85.4584 44.8625,-85.4133 44.9598,-85.3872 45.0728,-85.3698 45.2066,-85.3663 45.224,-85.342 45.2674,-85.3038 45.2987,-85.1908 45.3474,-85.0987 45.3613,-84.984 45.3786,-84.9458 45.3943,-84.9458 45.4169,-85.0014 45.4343,-85.0396 45.4551,-85.0726 45.4899,-85.0918 45.5351,-85.0865 45.5785,-85.057 45.6202,-84.9718 45.6984,-84.9319 45.7453,-84.8502 45.7523,-84.7563 45.7766,-84.732 45.7714,-84.7129 45.7679,-84.487 45.6776,-84.308 45.6445,-84.2332 45.6167,-84.162 45.5716,-84.1133 45.5316,-84.0647 45.5038,-83.9152 45.469,-83.5172 45.3387,-83.413 45.2779,-83.3817 45.2049,-83.3261 45.1249,-83.3017 45.071,-83.3017 45.0485,-83.3261 45.0432,-83.3782 45.0519,-83.4147 45.045,-83.4321 45.0276,-83.4286 44.972,-83.4043 44.9285,-83.3539 44.8764,-83.3434 44.8573,-83.3209 44.8208,-83.2913 44.7078,-83.2965 44.6522,-83.3243 44.5097,-83.3469 44.3985,-83.3852 44.3377,-83.4338 44.2925,-83.4842 44.2647,-83.5242 44.2282,-83.5572 44.1656,-83.5798 44.1187,-83.6093 44.077,-83.6962 44.0092,-83.8231 43.9675,-83.8665 43.9345,-83.8857 43.9032,-83.8978 43.8823,-83.9291 43.7624,-83.9152 43.719,-83.8822 43.6807,-83.8318 43.6529,-83.7675 43.6338,-83.7032 43.6199,-83.6563 43.6251,-83.4773 43.7329,-83.3174 43.9136,-83.2096 43.971,-83.0289 44.0283,-82.9611 44.0422,-82.8864 44.0335,-82.7908 43.9918,-82.7282 43.9449,-82.6605 43.8597,-82.6274 43.7798,-82.6083 43.686,-82.5162 43.2619,-82.4867 43.1663,-82.4345 43.0047,-82.4345 42.9682,-82.4693 42.8883,-82.4693 42.8552,-82.4815 42.8083,-82.4867 42.751,-82.5093 42.6832,-82.5388 42.6276,-82.5857 42.5824,-82.6605 42.5511,-82.6813 42.5928,-82.6431 42.6537,-82.6552 42.6658,-82.7109 42.6728,-82.7282 42.671,-82.7908 42.638,-82.8012 42.6172,-82.8082 42.5737,-82.8603 42.5181,-82.8864 42.4503,-82.902 42.4034,-82.9681 42.346,-83.0341 42.3269,-83.0897 42.2974,-83.1279 42.2313,-83.1297 42.1636,-83.1505 42.101,-83.1922 42.0332,-83.2027 42.0176,-83.4077 41.8334,-83.4269 41.8108,-83.4547 41.7343,-83.764 41.7239,-83.8804 41.7204,-84.3601 41.7065,-84.4001 41.7065,-84.8067 41.6961,-84.8067 41.7552,-84.8259 41.7604,-85.196 41.7604,-85.2916 41.7604,-85.66 41.7586,-85.7921 41.7586)))&quot;</value>
                <value>44.25</value>
                <value>-85.5</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.715385' y='0.230769' />
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</field>
                  </x-fields>
                  <y-fields>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
                    <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</field>
                  <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>46.823333333333323</value>
                <value>&quot;United States of America&quot;</value>
                <value>&quot;Delivery Truck&quot;</value>
                <value>&quot;Louisiana&quot;</value>
                <value>&quot;MULTIPOLYGON (((-91.9946 29.623,-91.8956 29.6213,-91.8469 29.6108,-91.7513 29.5657,-91.7496 29.5465,-91.7756 29.5257,-91.8191 29.51,-91.899 29.5153,-92.0433 29.5518,-92.151 29.5604,-92.2657 29.5552,-92.3891 29.5604,-92.582 29.59,-92.6168 29.6004,-92.7523 29.6352,-93.0756 29.7342,-93.1955 29.7586,-93.2876 29.7655,-93.4979 29.7568,-93.63 29.7447,-93.7169 29.7273,-93.8385 29.6908,-93.8698 29.7342,-93.8924 29.7447,-93.8941 29.7673,-93.9271 29.7951,-93.9185 29.8229,-93.8542 29.8646,-93.8211 29.9115,-93.7881 29.988,-93.7412 30.021,-93.7221 30.0505,-93.6995 30.061,-93.7238 30.0836,-93.703 30.1131,-93.7012 30.1374,-93.6891 30.1409,-93.6995 30.1757,-93.7203 30.2087,-93.7064 30.2434,-93.7047 30.2904,-93.7412 30.3008,-93.7586 30.339,-93.7586 30.3894,-93.7412 30.4033,-93.7134 30.4329,-93.6995 30.4589,-93.7169 30.4954,-93.7082 30.5215,-93.7395 30.5389,-93.729 30.5458,-93.7273 30.5736,-93.7116 30.5893,-93.6786 30.5945,-93.6891 30.6119,-93.6821 30.6414,-93.6682 30.6605,-93.63 30.6796,-93.6178 30.7179,-93.6143 30.7596,-93.5935 30.7631,-93.583 30.803,-93.5622 30.8082,-93.5535 30.8343,-93.5691 30.8447,-93.5587 30.8691,-93.5726 30.8865,-93.5483 30.8986,-93.5587 30.9125,-93.5309 30.9247,-93.5309 30.9577,-93.5726 30.9716,-93.5552 31.0046,-93.5083 31.0307,-93.5309 31.0533,-93.5274 31.0741,-93.5518 31.0794,-93.5379 31.1245,-93.5483 31.1558,-93.5361 31.1593,-93.5518 31.1854,-93.5883 31.1663,-93.6004 31.1767,-93.6074 31.2062,-93.5969 31.2288,-93.6178 31.2323,-93.6195 31.2705,-93.6421 31.2688,-93.6873 31.307,-93.6734 31.3244,-93.6682 31.3522,-93.6734 31.3957,-93.7047 31.4113,-93.6925 31.4391,-93.703 31.4547,-93.7255 31.4547,-93.7499 31.4686,-93.7116 31.5121,-93.7429 31.5156,-93.7481 31.5312,-93.7864 31.5277,-93.8194 31.5555,-93.835 31.5868,-93.8385 31.6059,-93.8194 31.6146,-93.8263 31.6668,-93.7951 31.7033,-93.8159 31.7085,-93.8159 31.7293,-93.8368 31.7502,-93.8229 31.7745,-93.8403 31.8006,-93.8733 31.8145,-93.8785 31.844,-93.882 31.8684,-93.9011 31.8753,-93.9011 31.8962,-93.9237 31.8857,-93.9289 31.9118,-93.9723 31.9205,-94.0158 31.9796,-94.0418 31.9935,-94.0418 32.1968,-94.0436 32.3915,-94.0436 32.6938,-94.0436 32.8815,-94.0436 33.0188,-93.8142 33.0188,-93.8055 33.0188,-93.5205 33.0188,-93.4909 33.0188,-93.2389 33.0188,-92.9887 33.0171,-92.7245 33.0136,-92.0693 33.0084,-91.4611 33.0067,-91.435 33.0067,-91.2647 33.0049,-91.1656 33.0049,-91.1726 32.9876,-91.2021 32.9615,-91.2143 32.9319,-91.2074 32.9146,-91.1743 32.9007,-91.1465 32.9059,-91.1309 32.9267,-91.1361 32.9789,-91.1066 32.9893,-91.0857 32.9719,-91.0822 32.9476,-91.0649 32.9267,-91.0631 32.9059,-91.0857 32.8746,-91.1066 32.8572,-91.1396 32.8485,-91.1587 32.8225,-91.1639 32.7877,-91.157 32.779,-91.1639 32.7495,-91.0822 32.7338,-91.0544 32.7199,-91.0718 32.6973,-91.1135 32.6765,-91.15 32.6435,-91.1517 32.6174,-91.1396 32.5948,-91.1187 32.5844,-91.0509 32.607,-91.037 32.6365,-91.0214 32.6452,-91.004 32.6122,-91.044 32.5757,-91.0701 32.5635,-91.0701 32.5427,-91.0075 32.5148,-90.9901 32.5009,-91.0023 32.4818,-91.037 32.4905,-91.0927 32.5479,-91.117 32.4992,-91.1153 32.4836,-91.0944 32.4575,-91.0284 32.4332,-90.9953 32.4505,-90.971 32.4401,-90.9658 32.4227,-90.9919 32.4036,-91.0023 32.3602,-90.9137 32.3411,-90.8911 32.3723,-90.8754 32.3706,-90.905 32.3167,-90.9502 32.2837,-90.9797 32.2924,-90.9832 32.2733,-90.9693 32.2524,-90.9849 32.2125,-91.0336 32.2403,-91.0614 32.2194,-91.0822 32.2264,-91.1118 32.2072,-91.1239 32.2107,-91.1639 32.1951,-91.1743 32.1568,-91.1656 32.1343,-91.1118 32.1256,-91.0788 32.1343,-91.0527 32.1238,-91.0492 32.1516,-91.0058 32.1621,-91.0092 32.1343,-91.0301 32.1203,-91.0301 32.1151,-91.037 32.0995,-91.0805 32.0786,-91.0805 32.0474,-91.1048 32.0508,-91.1361 32.0804,-91.157 32.0752,-91.1552 32.0526,-91.0909 32.0352,-91.077 32.0143,-91.1048 31.99,-91.1639 31.9831,-91.1882 31.9605,-91.1935 31.9361,-91.1813 31.917,-91.2473 31.8701,-91.2682 31.8597,-91.2456 31.8319,-91.2612 31.8093,-91.2838 31.8162,-91.2943 31.8597,-91.3447 31.844,-91.3655 31.7606,-91.2821 31.7728,-91.2595 31.7623,-91.2769 31.745,-91.3186 31.7502,-91.3638 31.7484,-91.3794 31.7328,-91.4003 31.6998,-91.4003 31.6198,-91.4368 31.6129,-91.4733 31.6251,-91.4941 31.6442,-91.515 31.6303,-91.5167 31.6111,-91.4889 31.5868,-91.4211 31.5972,-91.4055 31.5764,-91.4454 31.5416,-91.4802 31.5312,-91.5132 31.5329,-91.5132 31.4461,-91.4767 31.3974,-91.475 31.3678,-91.5045 31.3644,-91.5202 31.3748,-91.5428 31.4321,-91.5758 31.4096,-91.5688 31.38,-91.5462 31.3817,-91.548 31.347,-91.508 31.314,-91.5132 31.281,-91.5515 31.2636,-91.6366 31.267,-91.654 31.2566,-91.6488 31.2392,-91.6071 31.2132,-91.5897 31.1906,-91.5932 31.1697,-91.6279 31.1228,-91.5671 31.0689,-91.5601 31.0498,-91.5793 31.0237,-91.6366 30.9994,-91.1761 30.9994,-91.0596 30.9994,-90.825 30.9994,-90.5678 30.9994,-90.547 30.9994,-90.3471 31.0012,-90.2602 31.0012,-89.8362 31.0029,-89.7284 31.0029,-89.7371 30.9768,-89.7284 30.9681,-89.7562 30.9421,-89.7458 30.9195,-89.7736 30.8986,-89.7684 30.8656,-89.7823 30.8552,-89.7823 30.8187,-89.7979 30.8204,-89.8032 30.7909,-89.8292 30.7822,-89.8223 30.7544,-89.831 30.7161,-89.8466 30.7057,-89.8362 30.6918,-89.8431 30.6657,-89.8136 30.6379,-89.8223 30.6049,-89.8032 30.5597,-89.7806 30.5441,-89.758 30.4989,-89.7249 30.492,-89.7058 30.4641,-89.6902 30.4589,-89.678 30.4172,-89.6832 30.4068,-89.6572 30.3564,-89.6294 30.339,-89.6259 30.3147,-89.6467 30.2904,-89.6328 30.2799,-89.6294 30.2556,-89.6137 30.2452,-89.6155 30.2226,-89.5981 30.2139,-89.572 30.1809,-89.532 30.1948,-89.5234 30.1809,-89.605 30.1461,-89.6381 30.1339,-89.6798 30.0957,-89.7128 30.0662,-89.7267 30.0523,-89.7562 30.0366,-89.8066 30.0227,-89.824 29.9967,-89.8171 29.9654,-89.7875 29.9497,-89.7336 29.9376,-89.7145 29.9011,-89.6832 29.8854,-89.645 29.8837,-89.6137 29.8976,-89.5616 29.9775,-89.4903 30.0453,-89.459 30.0523,-89.4156 30.0418,-89.4034 30.0279,-89.3982 29.9828,-89.3652 29.9497,-89.3374 29.9428,-89.2592 29.9723,-89.254 29.9393,-89.287 29.9011,-89.2696 29.8715,-89.327 29.8437,-89.3409 29.8263,-89.3044 29.7933,-89.3009 29.7759,-89.3982 29.7586,-89.4504 29.736,-89.572 29.736,-89.6016 29.7255,-89.5963 29.703,-89.5494 29.6578,-89.6155 29.6491,-89.6659 29.6178,-89.6763 29.5987,-89.6798 29.5326,-89.6641 29.5066,-89.6294 29.4822,-89.539 29.4371,-89.4973 29.404,-89.3913 29.3867,-89.2505 29.331,-89.2018 29.331,-89.181 29.3224,-89.0958 29.225,-89.0402 29.2024,-89.0194 29.1712,-89.0767 29.0895,-89.1601 29.0408,-89.2505 29.0617,-89.3218 29.02,-89.3704 28.9765,-89.3843 28.9765,-89.3635 29.0269,-89.3652 29.0512,-89.3791 29.0791,-89.4625 29.1729,-89.5199 29.2129,-89.7806 29.3171,-89.8171 29.3432,-89.8275 29.3988,-89.8518 29.4492,-89.8814 29.4562,-89.9735 29.4457,-90.0047 29.4336,-90.0204 29.4075,-90.0291 29.331,-90.0326 29.2893,-90.069 29.2528,-90.0551 29.232,-90.0256 29.2163,-90.0899 29.1729,-90.1872 29.119,-90.2567 29.0947,-90.2567 29.1329,-90.288 29.1712,-90.3019 29.225,-90.3263 29.2459,-90.3523 29.2528,-90.3767 29.2407,-90.4097 29.2111,-90.434 29.2007,-90.4583 29.2077,-90.4844 29.2494,-90.5139 29.265,-90.5522 29.2598,-90.5817 29.2146,-90.6147 29.2007,-90.6617 29.1503,-90.7659 29.0912,-90.7712 29.0756,-90.752 29.0565,-90.8146 29.0634,-90.9641 29.1607,-91.1952 29.2337,-91.2578 29.265,-91.2856 29.2946,-91.263 29.3467,-91.2265 29.3745,-91.223 29.3971,-91.2334 29.4214,-91.2543 29.444,-91.2595 29.4492,-91.2873 29.4701,-91.515 29.5639,-91.5601 29.6091,-91.6088 29.6387,-91.6401 29.7047,-91.6748 29.7238,-91.7496 29.7308,-91.8191 29.7273,-91.8504 29.7377,-91.8799 29.7794,-91.9164 29.7968,-91.9738 29.7864,-92.0537 29.7534,-92.1006 29.7186,-92.1093 29.6838,-92.0815 29.6473,-91.9946 29.623)))&quot;</value>
                <value>31.0</value>
                <value>-92.0</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.341463' y='0.415584' />
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
    <worksheet name='Challenge 7'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Shipping Cost]' role='measure' type='quantitative'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column aggregation='Avg' datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Unit Price]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Unit Price]' derivation='Avg' name='[avg:Unit Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer Segment]' derivation='None' name='[none:Customer Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Shipping Cost]' derivation='Sum' name='[sum:Shipping Cost:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Exclusions (Country / Region,State)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Country:nk]' />
                <groupfilter function='level-members' level='[none:State or Province:nk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ontario&quot;' />
                    <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Quebec&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nuevo León&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]'>
            <groupfilter function='crossjoin' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]</column>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Exclusions (Country / Region,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' palette='tableau-red-blue' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='6'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' />
              <size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Shipping Cost:qk]' />
              <text column='[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Unit Price:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</rows>
        <cols>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)])</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]' field-type='quantitative' max='39037743.836956345' min='-31701971.530068971' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' max='24029563.789388679' min='-19432038.16560711' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' palette='tableau-red-green' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='tableau-light-gray' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-transparency' value='206' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column caption='Department' datatype='string' name='[Product Category]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Category]' derivation='None' name='[none:Product Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ontario&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Quebec&quot;' />
                </groupfilter>
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Distrito Federal&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Jalisco&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nuevo León&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oaxaca&quot;' />
                </groupfilter>
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arkansas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Connecticut&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Delaware&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;District of Columbia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Florida&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Idaho&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Illinois&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Indiana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Iowa&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kentucky&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Louisiana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maine&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maryland&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Massachusetts&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Michigan&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Minnesota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Mississippi&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Montana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nebraska&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nevada&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Hampshire&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Jersey&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Mexico&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New York&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Carolina&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Dakota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ohio&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oklahoma&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oregon&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Pennsylvania&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Rhode Island&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Carolina&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Dakota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Tennessee&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Utah&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Vermont&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Virginia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Washington&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;West Virginia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wisconsin&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wyoming&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='member' level='[none:Region:nk]' member='&quot;International&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]</column>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Region:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <geometry column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]' />
              <size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' />
              <wedge-size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.7691160440444946' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)] + [Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)])</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='challenge 1'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Sales]' role='measure' type='quantitative'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (City,Country / Region,State)]'>
            <groupfilter function='reorder-dimensionality' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ontario&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Toronto&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Quebec&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Montreal&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nuevo León&quot;' />
                    <groupfilter function='member' level='[none:City:nk]' member='&quot;Monterrey&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bessemer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Birmingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Enterprise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gadsden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Homewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Opelika&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phenix City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prattville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Selma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Talladega&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tuscaloosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vestavia Hills&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Avondale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bullhead City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casas Adobes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Mirage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flagstaff&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glendale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goodyear&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oro Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phoenix&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prescott&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prescott Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scottsdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sierra Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sun City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Surprise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tempe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tucson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yuma&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arkansas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bella Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Benton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bentonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bryant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cabot&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fayetteville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Smith&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hot Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jonesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Little Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Little Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paragould&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pine Bluff&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rogers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Russellville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Searcy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sherwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texarkana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Van Buren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Memphis&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Antioch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apple Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atascadero&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Berkeley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beverly Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burbank&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Calexico&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camarillo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carlsbad&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chula Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Citrus Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Claremont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coachella&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Costa Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Daly City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Los Angeles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Cajon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Centro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Dorado Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Escondido&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eureka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Foster City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilroy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goleta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granite Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hacienda Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hemet&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hesperia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntington Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inglewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Mesa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Quinta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laguna Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laguna Niguel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Elsinore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawndale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lemon Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lodi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Altos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Angeles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Banos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Los Gatos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manhattan Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manteca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Menlo Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mission Viejo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Modesto&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montebello&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moreno Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mountain View&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murrieta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Napa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ontario&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxnard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pacifica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palo Alto&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paradise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Petaluma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pico Rivera&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rancho Cucamonga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redding&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redlands&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redondo Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redwood City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riverside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rocklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sacramento&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salinas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Bernardino&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Carlos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Clemente&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Gabriel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Jose&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Luis Obispo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Mateo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Ramon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Barbara&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Clara&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Cruz&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Maria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Monica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Rosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saratoga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Lake Tahoe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stockton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sunnyvale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Temecula&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thousand Oaks&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tracy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Twentynine Palms&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vacaville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vallejo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Visalia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Hollywood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westminster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Whittier&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yuba City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yucaipa&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arvada&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boulder&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Broomfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Castle Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colorado Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Commerce City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Denver&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Durango&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Englewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Collins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fountain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Junction&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greeley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highlands Ranch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Littleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Louisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Loveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northglenn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pueblo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pueblo West&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thornton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westminster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheat Ridge&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Connecticut&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ansonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Branford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheshire&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Darien&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Hartford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glastonbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Guilford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hamden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hartford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Killingly Center&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meriden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Naugatuck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Britain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New London&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwalk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seymour&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shelton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Windsor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stamford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stratford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trumbull&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wallingford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willimantic&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Delaware&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;District of Columbia&quot;' />
                      <groupfilter function='member' level='[none:City:nk]' member='&quot;Washington&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Florida&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altamonte Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apopka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belle Glade&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boca Raton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boynton Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bradenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brandon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carol City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casselberry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coconut Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coral Gables&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coral Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deerfield Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Delray Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deltona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dunedin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Myers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Pierce&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fruit Cove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hialeah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hollywood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Homestead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Immokalee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jupiter&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kendall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kissimmee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Worth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Land O Lakes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lehigh Acres&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Margate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Melbourne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merritt Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Miramar&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Smyrna Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Miami&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Miami Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Port&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ocoee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orlando&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ormond Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oviedo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Beach Gardens&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Coast&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palm Harbor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Panama City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pensacola&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pine Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plant City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plantation&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Poinciana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pompano Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ponte Vedra Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Charlotte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Saint Lucie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riverview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Riviera Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Royal Palm Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Cloud&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Petersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sarasota&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seminole&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sunrise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tallahassee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tamarac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Titusville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Palm Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Garden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Haven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winter Springs&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Georgia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Athens&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atlanta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Augusta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dalton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Douglasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dunwoody&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Evans&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Forest Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hinesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kennesaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Grange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Macon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marietta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Martinez&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newnan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peachtree City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rome&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roswell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandy Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Savannah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smyrna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Statesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tucker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warner Robins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodstock&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Idaho&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Caldwell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coeur D Alene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Idaho Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewiston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meridian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moscow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nampa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pocatello&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Post Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rexburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Illinois&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Addison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Batavia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belleville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belvidere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bolingbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burbank&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Calumet City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carbondale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carol Stream&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carpentersville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Champaign&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Collinsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Country Club Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crystal Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Plaines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Downers Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Saint Louis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elgin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elk Grove Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Evanston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Forest Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frankfort&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Freeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Galesburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Ellyn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glendale Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glenview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granite City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gurnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoffman Estates&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Joliet&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kankakee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake In The Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lombard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Melrose Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moline&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Prospect&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mundelein&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Naperville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Normal&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Lawn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oswego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palatine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Park Ridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pekin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Peoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Romeoville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schaumburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Skokie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Streamwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tinley Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Urbana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vernon Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waukegan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheaton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodstock&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Indiana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carmel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crown Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Chicago&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elkhart&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Wayne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frankfort&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gary&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Granger&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hammond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hobart&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Indianapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jeffersonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kokomo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Porte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merrillville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Michigan City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mishawaka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muncie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Munster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Castle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schererville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seymour&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Bend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Terre Haute&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Valparaiso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vincennes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Lafayette&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Iowa&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ames&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ankeny&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bettendorf&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coralville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Council Bluffs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Davenport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Moines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dubuque&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Dodge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Iowa City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marshalltown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mason City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muscatine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ottumwa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sioux City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Urbandale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterloo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Des Moines&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Derby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dodge City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Emporia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garden City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hays&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hutchinson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kansas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leavenworth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leawood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lenexa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Liberal&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manhattan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olathe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Overland Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pittsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prairie Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shawnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Topeka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wichita&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kentucky&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowling Green&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Covington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Thomas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Georgetown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkinsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Louisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murray&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nicholasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owensboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paducah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasure Ridge Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Louisiana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alexandria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baton Rouge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bossier City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Houma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marrero&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Metairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Iberia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Orleans&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shreveport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Slidell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Terrytown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maine&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Augusta&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bangor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Biddeford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gorham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewiston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Scarborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westbrook&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maryland&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Annapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aspen Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethesda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camp Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Catonsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Crofton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cumberland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dundalk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edgewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ellicott City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Essex&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gaithersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Burnie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hagerstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laurel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middle River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Odenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olney&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owings Mills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Perry Hall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pikesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Potomac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Randallstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reisterstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Severna Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Silver Spring&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waldorf&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Massachusetts&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Abington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Acton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Agawam&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Amesbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Andover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ashland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Attleboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belchertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beverly&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Billerica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bourne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Braintree&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgewater&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookline&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cambridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicopee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danvers&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dedham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dennis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dracut&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duxbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Longmeadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easthampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairhaven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fall River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Falmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fitchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Foxborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Framingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gardner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gloucester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grafton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Groton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Haverhill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holyoke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ipswich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leominster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lexington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longmeadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lowell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ludlow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lunenburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Malden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marblehead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marlborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marshfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Natick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Needham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newburyport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Andover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Pembroke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Northampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oxford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palmer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pepperell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reading&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Revere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandwich&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saugus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scituate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sharon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shrewsbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerset&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Boston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Hadley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southbridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stoneham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stoughton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sudbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Swansea&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taunton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tewksbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Townsend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wakefield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walpole&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waltham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Webster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wellesley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westborough&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilbraham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winthrop&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Worcester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yarmouth&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Michigan&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Adrian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ann Arbor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Battle Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bay City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dearborn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dearborn Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Detroit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eastpointe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flint&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garden City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inkster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kalamazoo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lansing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lincoln Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Livonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Pleasant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskegon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Novi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owosso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pontiac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Huron&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Royal Oak&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saginaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Clair Shores&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sault Sainte Marie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shelby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southgate&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sterling Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taylor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walker&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waterford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wyoming&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Minnesota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apple Valley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Blaine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn Center&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burnsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coon Rapids&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cottage Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duluth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eden Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edina&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fridley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopkins&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Inver Grove Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lino Lakes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mankato&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maple Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maplewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minnetonka&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minnetonka Mills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moorhead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owatonna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plymouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Prior Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Red Wing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roseville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Cloud&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Louis Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Paul&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Savage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shakopee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shoreview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodbury&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Mississippi&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Biloxi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gulfport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hattiesburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Horn Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Meridian&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olive Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pearl&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tupelo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vicksburg&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clayton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Creve Coeur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ferguson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florissant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gladstone&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hazelwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Independence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jefferson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Joplin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kansas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kirkwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lees Summit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maryland Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mehlville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Overland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ozark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Raytown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Charles&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Joseph&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Louis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;University City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Webster Groves&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wentzville&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Montana&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Billings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bozeman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Butte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Great Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Helena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kalispell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Missoula&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nebraska&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellevue&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fremont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hastings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearney&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Vista&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lincoln&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norfolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Platte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Omaha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Papillion&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nevada&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Las Vegas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pahrump&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reno&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sparks&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Hampshire&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Derry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goffstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laconia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Londonderry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Merrimack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashua&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portsmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Jersey&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asbury Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Atlantic City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Avenel&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bayonne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Belleville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bergenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bridgeton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Camden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carteret&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cherry Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cliffside Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clifton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dumont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elizabeth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmwood Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Englewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ewing&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fair Lawn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fords&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glassboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hackensack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hawthorne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hillside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hoboken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hopatcong&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Irvington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Iselin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jersey City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearny&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Linden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lindenwold&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Livingston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lodi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lyndhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maple Shade&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maplewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Millville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montclair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Brunswick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Bergen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nutley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ocean City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Old Bridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Palisades Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paramus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parsippany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paterson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pennsauken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Perth Amboy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Phillipsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasantville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rahway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ridgewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roselle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rutherford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sayreville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scotch Plains&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Secaucus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Somerset&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Plainfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Vineland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Summit&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Teaneck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tinton Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Toms River&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Trenton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Union&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Union City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wayne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Milford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Orange&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willingboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodbridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wyckoff&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Mexico&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alamogordo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albuquerque&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carlsbad&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clovis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hobbs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Las Cruces&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rio Rancho&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roswell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Fe&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New York&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethpage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Binghamton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brooklyn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Centereach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Central Islip&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheektowaga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cohoes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Commack&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coram&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deer Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Depew&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dix Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Massapequa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Meadow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elmira&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin Square&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Freeport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Glen Cove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hempstead&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hicksville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holbrook&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ithaca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jamestown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenmore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Levittown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lindenhurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Rochelle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Niagara Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Babylon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Tonawanda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ossining&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Chester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rome&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roosevelt&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rotterdam&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rye&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scarsdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Schenectady&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shirley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smithtown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Syracuse&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tonawanda&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Utica&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Valley Stream&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Babylon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Islip&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Seneca&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;White Plains&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodmere&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Carolina&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albemarle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Apex&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asheboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Asheville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cary&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chapel Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cornelius&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Durham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fayetteville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Bragg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gastonia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Goldsboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hickory&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;High Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Indian Trail&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kannapolis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laurinburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mint Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mooresville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Bern&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Raleigh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rocky Mount&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salisbury&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sanford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Thomasville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wake Forest&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilson&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Dakota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bismarck&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dickinson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fargo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Forks&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mandan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Minot&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ohio&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Austintown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beavercreek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Berea&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Boardman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bowling Green&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Canton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cincinnati&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cuyahoga Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dayton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Delaware&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elyria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Euclid&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairborn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Findlay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gahanna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garfield Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grove City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hamilton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hilliard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huber Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hudson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kent&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kettering&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lima&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lorain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mason&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Massillon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newark&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Olmsted&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Ridgeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Royalton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reynoldsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sandusky&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shaker Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Steubenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Strongsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Upper Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warren&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westlake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Whitehall&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willoughby&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wooster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Xenia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Youngstown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oklahoma&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altus&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bartlesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Enid&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midwest City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Moore&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mustang&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oklahoma City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Owasso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ponca City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Shawnee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stillwater&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tulsa&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oregon&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Albany&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aloha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beaverton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bend&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coos Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corvallis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eugene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grants Pass&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gresham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hillsboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keizer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Klamath Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Oswego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mcminnville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Medford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oregon City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pendleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tigard&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Troutdale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tualatin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Linn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woodburn&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Pennsylvania&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allentown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Altoona&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baldwin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethel Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bethlehem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chambersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Drexel Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Easton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Erie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hanover&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hazleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hermitage&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;King of Prussia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Levittown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;McKeesport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Monroeville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Lebanon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Penn Hills&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Philadelphia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pittsburgh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plum&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pottstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Radnor&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reading&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Scranton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sharon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;State College&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Upper Saint Clair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Mifflin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilkes Barre&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilkinsburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Willow Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;York&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Rhode Island&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Barrington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Central Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coventry&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cumberland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;East Providence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Middletown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Kingstown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pawtucket&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smithfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tiverton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Warwick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Westerly&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Woonsocket&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Carolina&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aiken&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anderson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Florence&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greer&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hilton Head Island&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mauldin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Pleasant&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Myrtle Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;North Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spartanburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Summerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Taylors&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Dakota&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Aberdeen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookings&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rapid City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sioux Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Tennessee&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bartlett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brentwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chattanooga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clarksville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleveland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Collierville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Columbia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farragut&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gallatin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Germantown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greeneville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hendersonville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Johnson City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingsport&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Vergne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lebanon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Maryville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morristown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murfreesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Ridge&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Smyrna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring Hill&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Abilene&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Amarillo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Austin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Baytown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beaumont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bedford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brownsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bryan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burleson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Carrollton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cedar Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Channelview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cleburne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cloverleaf&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;College Station&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Conroe&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Coppell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corpus Christi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Corsicana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Deer Park&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Denton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Duncanville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eagle Pass&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edinburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Euless&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Farmers Branch&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Flower Mound&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Worth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Friendswood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Frisco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gainesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Garland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Georgetown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grand Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Grapevine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Haltom City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harker Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harlingen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Highland Village&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hurst&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Irving&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Keller&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Killeen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kingsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Porte&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lake Jackson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laredo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;League City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Leander&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lewisville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lubbock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lufkin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mcallen&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesquite&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mineral Wells&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Missouri City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Odessa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Paris&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pearland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pflugerville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pharr&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plainview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Port Arthur&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richardson&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rosenberg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Round Rock&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rowlett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Saginaw&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Angelo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Juan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;San Marcos&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seguin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sherman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spring&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sugar Land&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sulphur Springs&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texarkana&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;The Colony&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;The Woodlands&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tyler&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Victoria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watauga&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waxahachie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weatherford&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Weslaco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wichita Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wylie&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Utah&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;American Fork&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bountiful&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clearfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Draper&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Holladay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kaysville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kearns&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Layton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lehi&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Logan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Magna&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Midvale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Murray&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Ogden&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pleasant Grove&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salt Lake City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spanish Fork&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tooele&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Jordan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Valley City&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Vermont&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bennington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colchester&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Essex Junction&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rutland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;South Burlington&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Virginia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Alexandria&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Annandale&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Blacksburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlottesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Colonial Heights&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Dale City&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Danville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfax&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Hampton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Herndon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mechanicsville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Montclair&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Norfolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Petersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Portsmouth&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Reston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Roanoke&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rose Hill&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tysons Corner&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waynesboro&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Winchester&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Washington&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Anacortes&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Auburn&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellevue&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bothell&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Bremerton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Burien&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cottage Lake&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Covington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Des Moines&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Elk Plain&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Federal Way&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Issaquah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kennewick&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kent&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kirkland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lacey&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Longview&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Lynnwood&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Marysville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Mount Vernon&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Olympia&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasco&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Pullman&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Puyallup&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Renton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Richland&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seatac&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spanaway&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Tacoma&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Vancouver&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Walla Walla&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wenatchee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Yakima&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;West Virginia&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Beckley&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Charleston&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Clarksburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairmont&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntington&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgantown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Parkersburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wisconsin&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Appleton&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Brookfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cudahy&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Eau Claire&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Fitchburg&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Green Bay&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Greenfield&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Janesville&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Kenosha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;La Crosse&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Madison&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Manitowoc&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Menomonee Falls&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskego&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Neenah&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;New Berlin&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oak Creek&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Oshkosh&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Racine&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sheboygan&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Stevens Point&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Sun Prairie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Superior&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Watertown&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Waukesha&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wausau&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Wauwatosa&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Allis&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;West Bend&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wyoming&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Casper&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Cheyenne&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Gillette&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Laramie&quot;' />
                        <groupfilter function='member' level='[none:City:nk]' member='&quot;Rock Springs&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
              <order>
                <hierarchy name='[none:City:nk]' />
                <hierarchy name='[none:Country:nk]' />
                <hierarchy name='[none:State or Province:nk]' />
              </order>
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (City,Country / Region,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' palette='tableau-red-green' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <size column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:City:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
                <format attr='size' value='1.4832596778869629' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]</rows>
        <cols>[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='checkpoint 3'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore Sales Multi-language (Extract) Extract' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore Sales Multi-language (Extract) Extract'>
            <column caption='Country / Region' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Customer Segment]' role='dimension' type='nominal'>
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' name='[Profit]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal'>
            </column>
            <column caption='State' datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Missourri&quot;' value='&quot;Missouri&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Customer Segment]' derivation='None' name='[none:Customer Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[State or Province]' derivation='None' name='[none:State or Province:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ontario&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Quebec&quot;' />
                </groupfilter>
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Distrito Federal&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Jalisco&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nuevo León&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oaxaca&quot;' />
                </groupfilter>
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Alabama&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arizona&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Arkansas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;California&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Colorado&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Connecticut&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Delaware&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;District of Columbia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Florida&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Idaho&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Illinois&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Indiana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Iowa&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kansas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Kentucky&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Louisiana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maine&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Maryland&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Massachusetts&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Michigan&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Minnesota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Mississippi&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Missouri&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Montana&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nebraska&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Nevada&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Hampshire&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Jersey&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New Mexico&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;New York&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Carolina&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;North Dakota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Ohio&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oklahoma&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Oregon&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Pennsylvania&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Rhode Island&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Carolina&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;South Dakota&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Tennessee&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Texas&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Utah&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Vermont&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Virginia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Washington&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;West Virginia&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wisconsin&quot;' />
                  <groupfilter function='member' level='[none:State or Province:nk]' member='&quot;Wyoming&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore Sales Multi-language (Extract) Extract].[Inclusions (Country / Region,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)]' field-type='quantitative' max='-4764668.2826959249' min='-14742226.91884633' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)]' field-type='quantitative' max='7230340.7137793843' min='1051010.4271461871' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Country:nk]' />
              <lod column='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:State or Province:nk]' />
              <geometry column='[Sample - Superstore Sales Multi-language (Extract) Extract].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Latitude (generated)])</rows>
        <cols>([Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk] * [Sample - Superstore Sales Multi-language (Extract) Extract].[Longitude (generated)])</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' type='size' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='checkpoint 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Region:nk]' type='color' />
            <card pane-specification-id='2' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]' type='color' />
            <card pane-specification-id='2' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Region:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='challenge 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' type='size' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Challenge 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Challenge 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' type='size' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Product Category:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Challenge 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Challenge 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Challenge 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[avg:Shipping Cost:qk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Challenge 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='6' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Sales:qk]' type='color' />
            <card pane-specification-id='6' param='[Sample - Superstore Sales Multi-language (Extract) Extract].[sum:Shipping Cost:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[:Measure Names]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Customer Segment:nk]</field>
          <field>[Sample - Superstore Sales Multi-language (Extract) Extract].[none:Ship Mode:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      +AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='checkpoint 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='challenge 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='248' name='Challenge 2' width='384'>
      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
      vDdl1lkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Challenge 3' width='384'>
      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
    </thumbnail>
    <thumbnail height='192' name='Challenge 4' width='192'>
      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
      BxWapln1bFa7pOc2ODSPsEyLwWDIerVi6fsMBmVSbdAf3PEp6maW7XrESUriP2P/m3/J7PCY
      xGngr1a02u2PclLeN3/SNL13/ny8s+p7RA2S4tNRDaDv6x2r/lc/B75PEseslkscx8GyykHu
      9/t3bOF6Pe225HlOITSkEEgEq+kNL7761R0lfixRulHozyiKaDabL9UE1xdBXT/tdps0SdGE
      TpGXycNOt8vDhw8rUl/ljyli3G3Jsoy8kIStDlJoiCJnOZ18MvqB2xZMWZbtJCX4ZBcAUNni
      jUajsuHqPXvhdqHU/0kp6Q4GtDodGu12FR5909BlvzcozSghysSPbrIM1xUB68cWRavebDYr
      Frp6z14l2/rJ85zLy0vW6zUXp6dcPH/Od1999VLzj++TZqtFu98jPX6K3mojpCTZ+G2fgn5M
      06TT6VR8RSrfVH++T3YB1I8phbVR3Du7UJvbUAnTshiOxzRbrXs7s3yfmKbJkydPefL0ScnE
      hsCwnDu5h48ldf0o6o+6ftQg7yqgWa/XrFarksRq87coCHb2LH6VmKbJk88+5+kXX5anpBCI
      DQtevXDpY0hdPypyp0i36pG8T8oHeJWojh8qzKlp2h1yKbXz1x0hJbtwMK8jKppgWRZFXjCb
      ThkMh3foxH9IAuddimVZVUZb8eqrpt51UaHB9XpdsuA1GoTrdQXqexNRZpIQgsFgyGwyob/h
      /FTXqtcvf0xRbbdUbYiaPx+8P8APEdXwTgG+kiTh+fPnmKbJdDplMBhUq1uZKXmec3Bw8NZF
      6vVJrpzBXUzKbzrA70M/aZoSBEFlJiZJwtXVFcvlkiiK2NvbqxCWKrcCJUy68Zaliko/UsoK
      Yg13fY+30c/roEHfVLbnT/ypgOFeV+rOav3on06n6LrO6ekpzWazYnw+Pj4uOXYuLzk+Pr73
      urtODSnLZhEKU6Sw5a7rvjSgn8opoHY3dR8Kbav4Os/OzqrdP0kSnj59ynw+J8synj59eu91
      79OP4kVV9RsqUrTdaqq+x35MHW3PH9u2/2KdANuiQqTKwVmv13fsX9UpcDQavTJ0WYdPqMFT
      rUiBKjOteg/rul5FFNR31Qt4XmeQP5R+sixjsVhU4VJ9Q7SrfhdC0Nvwsr7qOtv6qXe/UVB0
      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
    </thumbnail>
    <thumbnail height='192' name='Challenge 5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Challenge 6' width='192'>
      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
      SgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Challenge 7' width='384'>
      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
      AElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
